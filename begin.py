

from PIL import ImageGrab,Image
from win32com.client import Dispatch, DispatchEx
import pythoncom,os,itertools,time,base64
from collections import OrderedDict
import openpyxl,gc
import re

import logging,time,traceback,datetime,calendar
from wxpy import *
from tkinter import *
from tkinter.ttk import *
#设定log的输出设置
logging.basicConfig(level=logging.WARNING,
                    format='asctime:        %(asctime)s \n'  # 时间
                           'bug_line:       line:%(lineno)d \n'  # 文件名_行号
                           'level:          %(levelname)s \n'  # log级别
                           'message:        %(message)s \n',  # log信息
                    datefmt='%a, %d %b %Y %H:%M:%S',
                    filename='日志.log',  # sys.path[1]获取当前的工作路径
                    filemode='a')  # 如果模式为'a'，则为续写（不会抹掉之前的log）

class Open_Excel():
    '''打开当前文件夹所有xlsx文件'''
    def __init__(self,month):
        self.month=month  #tkinter上选择的月份

    #
    def file_list(self):
        '''获取当前文件夹内所有出租房的xlsx文件 组成list,
            (不是xlsx文件、截图文件、打开状态的excel文件)'''
        file_list=[]
        for file in os.listdir('.'):
            if os.path.splitext(file)[1]=='.xlsx' and file!='截图.xlsx' and '~$'not in file:
                file_list.append(file)
        return file_list


    def get_excel_info(self, file,all_info,shuidian_dict):
        '''循环每个excel文件里的sheet，获取每个住户对应的所有租金详情
        :param file: excel,房子
        :param all_info: 每个住户对应其数据组成的dict,格式{住户A:{电费:xx,..合计:xx},住户B....}
        :param shuidian_dict: 每个房子用水电量组成的dict：{房子名1:[[房号1,用电量,用水量]...[合计,用电量,用水量]],房子名2:...}
        :return:
        过程：1.循环excel每个sheet：
                2.循环sheet每一行：---当前行的月份是目标：添加到all_info
                3.判断是否获取了该月份的房租信息：---有，设定水电量list，可如果都为0，改为无信息
                                               ---无，改为无信息
                4.该租户的水电量添加到shuidian_dict
             5.把该excel(房子)的总用水电量添加到shuidian_dict

        '''

        wb = openpyxl.load_workbook(file,data_only=True) #打开excel，data_only取excel显示的值而不是公式

        fangzi=os.path.splitext(file)[0]#房子名
        shuidian_dict[fangzi]=[]     #每个房子水电list
        total_dian=0    #该房子的总用电量
        total_shui=0    #该房子的总用水量

        # 循环每个sheet(租户)
        for sheet in wb.worksheets:
            the_zuhu = fangzi + '-' + sheet.title  # 住户名由 房子名+房号
            sheet_value =list(sheet.values)  # 当前sheet的所有value
            keys = sheet_value[0] # ['电表', '水表', '用电量', '用水量', '电费', '水费', '房租', '垃圾费', '其他', '合计']

            month_dict = OrderedDict()  # 目标月份的每一项组成的dict
            # 循环每行(每个月)
            for month_value in sheet_value[1:]:
                the_month = '%s-%s' % (month_value[0], month_value[1]) #该行的月份

                #当前月份是需要获取的月份
                if the_month==self.month:
                    #让年份、电费、水费等对应，组成dict
                    for i in range(len(month_value)):
                        key=keys[i]
                        value = month_value[i]  # 每个项目里的数据
                        month_dict[key] = value #电表、水表等对应
                    month_dict['月份'] = self.month       #包括年
                    all_info[the_zuhu] = month_dict  # 所有 住户 组成的dict

            if month_dict:
                #因为设定了自动复制下一个月，如果水电费都为0，说明没有算好！
                if month_dict['电费'] in [None,0,'0'] and month_dict['水费'] in [None,0,'0']:
                    all_info[the_zuhu]=0
                #该sheet(租户)的用水电量
                dian = eval(str(month_dict['用电量'])) or 0
                shui = eval(str(month_dict['用水量'])) or 0
                zuke_shuidian = [sheet.title, dian, shui]
                total_dian += dian
                total_shui +=shui
            else:#目标月份直接没有，为0
                all_info[the_zuhu] = 0
                zuke_shuidian = [sheet.title, 0, 0]
            print(all_info[the_zuhu])
            shuidian_dict[fangzi].append(zuke_shuidian) #每个租户的用水电量list添加到该房子的list
        #该file(房子)，水电的合计
        shuidian_dict[fangzi].append(['合计',total_dian,total_shui])
        print(['合计',total_dian,total_shui])

        wb.close()      # 关闭Excel文件，不保存
        del wb#删除工作簿
        gc.collect()#内存释放

    #
    def save_img(self,file,month_info,send_info):
        '''根据每个住户对应的租金，在截图xlsx文件修改数值，然后截图保存
        :param file: 截图.xlsx
        :param month_info: 所有住户此月的租金信息dict
        :param send_info: 全部住户的租金信息(用于微信发送)
        :return:
        '''
        file_name = os.path.abspath(file)  # 把相对路径转成绝对路径
        pythoncom.CoInitialize()  # 开启多线程
        excel = DispatchEx('excel.application')# 创建Excel对象
        excel.visible = False         # 不显示Excel
        excel.DisplayAlerts = 0     # 关闭系统警告(保存时不会弹出窗口)

        workbook = excel.workbooks.Open(file_name)# 打开截图.xlsx
        wSheet = workbook.worksheets['截图']

        # 循环每个住户的数据,根据 所选月份，得到具体数据，然后再截图xlxs上改变数字，截图保存，添加到send_info
        for the_zuhu,month_dict in month_info.items():
            #该住户此月的租金信息不为空
            if month_dict!=0:
                time.sleep(0.6)
                img_name = self.month + '：' + the_zuhu  #该住户此月的截图名
                self.change_sheet(wSheet, month_dict)   #根据不同住户 改变截图xlsx 里的 每个项目的金额
                self.snapshot(excel, wSheet, img_name)#截图，保存
                send_info[the_zuhu] = [month_dict['租户'],month_dict['合计'], img_name + '.png'] #格式：{住户A：[租户名，合计租金，图片名称],住户B....}
                print(send_info[the_zuhu])
            else:
                send_info[the_zuhu]=0

        workbook.Close(False)  # 关闭Excel文件，不保存
        excel.Quit()  # 退出Excel
        pythoncom.CoUninitialize()  # 关闭多线程


    def change_sheet(self,sheet,data):
        '''根据不同住户 改变截图xlsx  每个项目的金额'''
        the_key = data.keys()  # [月份、租户，'电表', '水表', '用电量', '用水量', '电费', '水费', '房租', '垃圾费', '其他', '合计']
        all_range = itertools.chain(sheet.usedrange)  # 合并所有单元格元素

        # 循环所有单元格，如果是电费、水费等项目，就修改其对应的单元格数值
        for one in all_range:
            if one.value in the_key:
                one.offset(1, 2).value = data[one.value] #偏移到右边第一个的单元格
        #print(sheet.usedrange.Value)

    def snapshot(self,excel,sheet,img_name):
        '''
        :param excel: win32 的excel对象
        :param sheet: 截图sheet
        :param img_name: 月份+住户
        :return:
        '''
        # 选定截图区域，保存img文件
        sheet.UsedRange.CopyPicture()  # 复制有内容的单元格区域
        sheet.Paste()  # 粘贴
        excel.Selection.ShapeRange.Name = img_name  # 将刚刚选择的Shape重命名，避免与已有图片混淆
        sheet.Shapes(img_name).Copy()  # 选择图片
        img = ImageGrab.grabclipboard()  # 获取剪贴板的图片数据
        img.save(img_name + ".png")


    def get_all_info(self,):
        '''循环当前文件夹的所有excel文件，
            获取每个住户该月的所有具体租金，以及该房子的用水电量情况'''

        all_info=OrderedDict()# 每个住户对应其数据组成的dict,格式{住户A:{电费:xx,..合计:xx},住户B....}
        shuidian_dict=OrderedDict()#每个房子用水电量组成的dict：{房子名1:[[房号1,用电量,用水量]...[合计,用电量,用水量]],房子名2:...}
        #循环当前文件夹的所有excel文件，
        for file in self.file_list():
            print('获取 %s 的房租信息'%file)
            self.get_excel_info(file,all_info,shuidian_dict)#获取每个住户该月的所有具体租金，以及该房子的用水电量情况
            print('提前创建当前月份/下个月的数据')
            self.creat_next_month(file)#提前创建当前月份/下个月的数据
            print()

        return all_info,shuidian_dict

    def get_send_info(self):
        time1=time.time()
        month_info,shuidian_dict=self.get_all_info()  #获取所有租户所选月份对应的所有具体租金、水电量
        time2 = time.time()
        print('获取所有房租信息耗时',int(time2-time1),'\n') #1.443082571029663

        send_info = OrderedDict()  # 在微信发送的dict，格式：{住户A：[租户名，合计租金，图片名称],住户B....}
        self.save_img('截图.xlsx', month_info,send_info) #将房租信息处理成图片，并把对应信息放入send_info
        print('截图耗时',int(time.time() - time2) ,'\n')#3.7622151374816895

        return send_info,shuidian_dict


    def creat_next_month(self,file):
        '''提前创建当前月份/下个月的数据，这样就不需要自己手动去复制了！！'''
        def copy_next_row(excel, sheet_name, row_num, year, month):
            '''复制当前sheet最后一行的数据，粘贴后改为当前月份或者下一个月'''
            excel.Sheets(sheet_name).Select() #锁定sheet
            excel.Rows(row_num).Select()      #锁定要复制的行
            excel.Selection.Copy()            #复制
            excel.Rows(row_num + 1).Select()  #锁定要粘贴的行
            excel.ActiveSheet.Paste()         #粘贴

            wSheet.Cells(row_num + 1, 1).Value = year
            wSheet.Cells(row_num + 1, 2).Value = month

        now_time = datetime.datetime.now()
        now_month_1=datetime.datetime(now_time.year, now_time.month, 1)
        days_num = calendar.monthrange(now_time.year, now_time.month)[1]  # 获取当前月有多少天
        next_month_1 = now_month_1 + datetime.timedelta(days=days_num)      #下个月的一号

        file_name = os.path.abspath(file)  # 把相对路径转成绝对路径
        pythoncom.CoInitialize()  # 开启多线程
        excel = DispatchEx('excel.application')  # 创建Excel对象
        excel.visible = False  # 显示Excel
        excel.DisplayAlerts = 0  # 关闭系统警告(保存时不会弹出窗口)

        workbook = excel.workbooks.Open(file_name)  # 打开截图.xlsx
        ws_count = workbook.Worksheets.Count        #当前excel有多少个sheet
        #循环所有sheet
        for i in range(ws_count):
            wSheet=workbook.worksheets[i]
            sheet_name=wSheet.name
            last_row=[]
            row_num=0
            rows=wSheet.UsedRange.Value
            for row in rows:
                if list(row)[0]:
                    last_row = list(row)#当前最后一行的数据
                    row_num+=1          #当前最后一行的行数
            row_year=int(last_row[0])                   #最后一行的年份
            row_month=int(last_row[1].replace('月','')) #最后一行的月份

            #当前月份如果还没有记录，  那么复制最后一行并且改为当前月份
            if now_month_1>datetime.datetime(row_year,row_month,1):
                now_year=str(now_time.year)
                now_month = '%s月'%now_time.month
                copy_next_row(excel, sheet_name, row_num, now_year, now_month)#复制最后一行并且改为当前月份
                row_num+=1
            # 下一个月如果还没有记录，  那么复制最后一行并且改为下个月份
            if datetime.datetime(next_month_1.year,next_month_1.month, 1)> datetime.datetime(row_year, row_month, 1):
                #print(next_month_1,datetime.datetime(row_year, row_month, 1))
                next_year = str(next_month_1.year)
                next_month = '%s月' % next_month_1.month
                copy_next_row(excel, sheet_name, row_num, next_year, next_month)
        workbook.Close(True)  # 关闭Excel文件，保存
        excel.Quit()  # 退出Excel
        pythoncom.CoUninitialize()  # 关闭多线程

'''Open_Excel是根据每个excel里的每个租客租金详情，生成房租信息send_info 以及对应的表格图片
   过程：Open_Excel(月份) 输入月份实例化
         get_send_info() 运行
         get_all_info    获取当月所有租户具体租金
                        ---get_excel_info(file) 打开每个excel获取所有房租信息 （运用了openpyxl）
                        ---creat_next_month(file) 提前创建当前月份/下个月的数据
                        ---month_info   存放 目的房租信息
                        ---shuidian_dict 存放 用水电量信息
         save_img()     将房租信息处理成图片，并把对应信息放入send_info   （运用了win32com）
                        -循环所有租户：
                                     ---change_sheet()   #根据不同住户 改变截图xlsx 里的 每个项目的金额
                                     ---snapshot()#截图，保存
                                     ---send_info 保存格式：{住户A：[租户名，合计租金，图片名称],住户B....}
    return：send_info,fangzi_shuidian
         '''




'''tk窗口
   1.年月时间选择窗口
        要点：根据当前时间自动选择好
             选择月份，会在text窗口提示
             
   2.text显示操作窗口
        要点：不同操作，字体不同————初始、常规、警告、报错
                     1.选择时间                              常规
                     2.选择微信昵称                           常规
                     3.获取xx月所有房租                       常规 
                     4.报错：获取xx月房租失败，再按一次        报错 
                     5.登录微信《》成功                       常规 
                     6.报错：微信登录失败                     报错  
                     7.点击发送：① 所有住户都没有房租信息         警告
                                ②此次发送的是房租/特定内容       常规             
                                ③报错：此时已掉线，请重新登录    报错                                
                                ④没有选中租户，请选择            警告
                                ⑤成功，发送了N个租户             常规
              插入后，text窗口不可编辑，而且一直显示的是最新内容
              
     发送窗口
        构成：1.租客在微信上的昵称 单选按钮(注：房间名为 “房屋-房号” 组成)  
              2.发送特定内容(输入框/登录-发送按钮)
   
   3.主要操作的按钮
        构成：获取房租信息：
                  步骤：清空tree
                        调用Open_Excel，获取住户租金详情，生成截图
                        将租金详情在tree上显示出来，将按钮、截图等关系放在self.orm （具体见insert_tv()）
                        弹出新的窗口，显示每栋房子的用水电情况
              登录微信/发送房租：
                  ————登录：使用wxpy登录微信，成功后改变按钮状态
                  ————发送：
                          1.判断是否获取了住户详情
                          2.判断所选月份下，获取的住户能否被选中
                          3.判断此时微信是否在线：
                          4.循环self.orm(存放每个住户信息的dict)
                                发送条件：---此住户被选中(多选按钮打勾)
                                         ---微信有此住户
                          5.text插入发送情况
    
   4.tree显示窗口：
        构成：——tree头，因为tree原始的头会随滚动条动，所以用按钮重设了一个头
             —— 主体： 滚动条
                       画布canvas：tree
                                   多选按钮frame
        要点：鼠标滚轮滚动时，改变的页面是canvas整个画面(包括多选按钮) 而不是单独treeview
              设定tree的样式：---每行高度
                             ---颜色：常规、被选中时、不可选时
    
   5.insert_tv 插入tree时 设定每个item跟多选按钮 的联系
        插入：
               循环send_info_dict：---如果value是数字(0)，那么此租户没结算房租
                                  ---结算了房租：tree插入该租户
                                                将该有效的租户信息放入self.orm
                                  ---创建多选按钮，与tree该行(item)绑定
        要点：
               根据tree重设定窗口tv_frame的高度
               多选按钮与item绑定：勾选按钮/点击item，2者都会发生改变，
               每次选择后，全选按钮也会发生改变
               没有结算房租的，其状态为不可选
               
'''

class My_Tk():
    def __init__(self):
        tmp = open("tmp.ico", "wb+")
        tmp.write(base64.b64decode("AAABAAEAgIAAAAEAIAAoCAEAFgAAACgAAACAAAAAAAEAAAEAIAAAAAAAAAABABMLAAATCwgAAAAIAAAACAAAAAggAAAAIAAAADAAAAAwABAQUAAAMGAAIFBwAEAwgBBAIIAAMCCAABAggAAAAHAAAABgAAAAQAAAADAAAAAgwAAAAQAAAAGAAEBCAIEBAoECAgNBgsQEgkSGh4LFR8nDRolLg8dKC8RICoqEBwmIgsVGxcIDA8QBAkJCwMDBQcwAAAAQAAAAFAAAABgAAAAwAAAAOAAAADwACAxQDBwoaCRAXMgsXIF8OHCaNER8rsBQkMMIWKDfRGC481B41RsggN0q2Iz1RmSM+VG0hPlA4HjNAEhAagAAAAEAAAACAAAAAwAAAAUAAAAHAAAACQAAAAsAAAAOAAAAEAAAABMAAAAXAAAAIQEBASYCAgMmBQoONgoVHXkNGSPMDx8q9BMmMv8XLDn/HDNA/yA5Sf8lQVT/Kkdb/yxMYP8vUWj/MFRs+DBYb9wxXHaMNmB8JTxvfAQQdW4AJnByAEFJSQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAIAAAADAAAABQAAAAYAAAAIAAAACQAAAAsAAAAOAAAAEwAAABcAAAAcAAAAIAAAACQAAAAoAAAALQEBAjcCAwRCBwoMTQsRFl4LFyCiDR0o9REhLf8VKDf/GjFB/x45SP8kQVH/KUpd/y5RZ/80Wm//OmF3/z1pgv9BbYj/QG6K/z1vi/89b4qxRn6YHuD//wBDlLoArcK2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAIAAAACAAAABAAAAAYAAAAJAAAADAAAAA8AAAASAAAAFgAAABoAAAAdAAAAIQAAACYAAAAtAAAANAAAADgAAAA9AAAAQgAAAEYCAwNNBgoMaw0TF50RGR/LEx4m6g8eKfsQIS//Eyc2/xkvQP8fOUv/JEBT/ylIXf8tUWf/NFpx/z1nfv9EcYz/TH2Y/02Env9MhqT/SoWk/0R+m/RDephSAAAAAAD3pwCWqNkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAIAAAADAAAABAAAAAYAAAAIAAAACwAAAA0AAAARAAAAFgAAABwAAAAiAAAAJwAAAC0AAAAyAAAANwAAADwAAABAAAAARQAAAE0AAABQAAAAVAAAAFcAAABcAQEBbAYJCpQNFBjcEhsh/RYfJv8YIiz/EiEs/xAjMv8VKzv/GTJE/yA7UP8oSF7/LFJq/zRbdP9HdY7/V4yl/2mivv9uqsj/X566/1WTt/9TkLT/S4an60Z+nEIAAAAAMbX2AJ2wzQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAEAAAABAAAAAgAAAAIAAAAEAAAABQAAAAYAAAAIAAAACgAAAA4AAAASAAAAFwAAABwAAAAgAAAAJQAAACsAAAAyAAAAOQAAAEAAAABGAAAASwAAAE8AAABTAAAAVwAAAFoAAABfAAAAYwAAAGUAAABrAAABgQABAawBAgPZBAcI9w4UGP8THCP/GSIq/xwnL/8cKTT/EyIu/xQpOv8ZM0b/ID1U/yhMZP8vWHP/NmF+/0Vzkv9Wjaf/aKjD/2uvzP9go8D/WZfA/1aUufhPi6uAW5y7DdLq/wB6sN0Al6rWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAACAAAAAgAAAAEAAAABAAAAAAAAAAAAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAgAAAAIAAAADAAAABAAAAAQAAAAFAAAABgAAAAcAAAAKAAAADQAAABAAAAATAAAAFwAAABsAAAAgAAAAJgAAACwAAAAzAAAAOQAAAD4AAABEAAAASwAAAFAAAABWAAAAWwAAAF8AAABiAAAAZQAAAGYAAABoAAAAagAAAG0AAAB3AAEBlwABAcUAAQLrAQID/gEDA/8CBAT/BwsO/xIaIP8ZIin/Hysz/yUzPf8jLzv/HSw4/xovPf8gO07/Jkhh/yxTbf8yXHv/NGGA/z5yjv9IgJ7/U5Ku/2Kkv/94vtX/jdPjtI/d7he9//8BU4NvAHrK0wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAABAAAAAQAAAAIAAAACAAAAAwAAAAQAAAAFAAAABgAAAAYAAAAGAAAABQAAAAUAAAAEAAAABAAAAAQAAAAFAAAABgAAAAYAAAAIAAAACQAAAAoAAAALAAAADAAAAA4AAAAPAAAAEQAAABQAAAAXAAAAGgAAAB4AAAAjAAAAKAAAAC0AAAAzAAAAOAAAAD4AAABDAAAASgAAAFAAAABVAAAAWgAAAF4AAABhAAAAYwAAAGgAAABpAAAAbAAAAG0AAABuAAAAbgAAAHIAAAGAAAEBpgABAdQAAgL2AAMD/wEDA/8BAwT/AQID/wEDA/8DBQb/DBAV/xkiKv8fKzP/JTM8/yw7Rv8wQU3/Lj9L/y9FUf84VGX/QmZ6/0twhv9QeI7/YZCm/3Spvf+LxtX/qu31/7r9/uzH//9O////AgD/5gCl7u8AfsDVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAABAAAAAgEAAAQAAAAFAAACCAAAAQoAAAIMAAABDwAAABEAAAATAAAAEwAAABIAAAAQAAAADwAAAA4AAAAOAAAAEAAAABEAAAAUAAAAFgAAABgAAAAaAAAAHQAAACAAAAAiAAAAJAAAACcAAAAqAAAALgAAADIAAAA2AAAAOwAAAEEAAABGAAAATAAAAFAAAABVAAAAWAAAAFsAAABfAAAAYwAAAGYAAABoAAAAaQAAAGsAAABsAAAAbgAAAG8AAABvAAAAcQAAAHUAAQGCAAECrwACAd0AAgL6AQID/wEDA/8BAwT/AgME/wIEBf8BAwT/AQME/wIEBf8FBwj/Exkf/x8pM/8lMzz/MUJL/zhLVv9AV2P/Q1tm/0Vcaf9UcX7/ZomX/3yitP+Rv9H/o9zn/7Pt8v/A+/z/w/7+oOD//w////8A/v//ANL//wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAIAAAADAQMHBAQDBQYECAoJCA0TEAkSGxsKEx4lChMdLAgQGSwGDRMtBAcLKgMEBioCAwQpAQECJwABASQAAQEiAAAAIgAAACIAAAAlAAAAKQAAACwAAAAvAAAAMwAAADYAAAA5AAAAPAAAAD8AAABBAAAARQAAAEgAAABKAAAATgAAAFIAAABWAAAAWQAAAF0AAABgAAAAYwAAAGUAAABmAAAAZwAAAGkAAABqAAAAbAAAAGwAAABtAAAAbQAAAG8AAABwAAAAcQAAAHMAAQGGAAECsQACAuIBAwP8AQMD/wEDBP8CAwX/AwQF/wMFBf8DBQb/AwUG/wMFBf8DBQb/AwUG/wQGBv8HCgz/FyAm/yYzPf8xQk7/PFFd/0pkcf9SbXz/XX6L/117if9ff4z/aYmV/4avuf+czNf/seXq/8P3+OHL+vo8////Af/9/QD3//8Au///AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAIAAAAEAAAABgIDAwoJEhsTECAxPBIjNnIVJjiXFiY7qxYnOLoXKDnEFyg7uhYpPbMWKT+oFSg9lxQmOoAPITBkChYfTgQIDD8BAgM8AAEBPQAAAEEAAABEAAAASAAAAEsAAABOAAAAUAAAAFMAAABWAAAAWAAAAFkAAABcAAAAXgAAAF8AAABhAAAAYwAAAGUAAABmAAAAZwAAAGgAAABpAAAAagAAAGoAAABqAAAAawAAAGsAAABtAAAAbQAAAG4AAABwAAAAcAAAAHMAAAGCAAEBrAECAuIBAwP9AgQE/wIEBf8DBAX/AwUG/wMFB/8EBgf/BAYH/wQHB/8EBgf/BAYH/wQHCP8EBwn/AwYI/wQHCP8IDRD/HCYt/zBCTf9BVWP/S2Rw/157i/9lhZT/cJWh/3+puP+Hsbv/i7G7/5G7xv+QvMj/nszaisvo6AqTe3IAjqGhAP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAIAAAAEAAAABwAAAAwAAAASAgQGGREfMGcVJzrgGCs++xotQv8fMkn/JzxQ/ytCV/8rQ1n/Jj5W/x83Uf8eOVL/IDxX+B8+We8dPVfTGjdUqREmOnsGDBNdAQIDWAAAAFoAAABcAAAAXgAAAGAAAABhAAAAYwAAAGQAAABkAAAAZgAAAGYAAABnAAAAZwAAAGgAAABpAAAAaQAAAGoAAABqAAAAagAAAGoAAABqAAAAagAAAGoAAABqAAAAagAAAGwAAABsAAAAcAAAAHEAAAF7AAEBogEDAtsBAwT7AQQF/wMFBf8EBQb/BAYH/wQHB/8FBwj/BQcI/wYICP8FCAn/BQgI/wUICP8FCAn/BQgK/wUJC/8FCQv/BQkL/wUKDP8KERT/HSsx/ztSXf9OZ3X/Y4GQ/3OWpv99pK//jrbD/6DN2P+w3eb/vert/7Xk6dabwMswMi4nBP///wBLX18A////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAACAAAABgAAAAsAAAASAAAAGgAAACQFCQ42EyM0uBgqPv8cL0P/HzFH/yU7Uf8xR1//NU9o/zVQaf8vSmL/JT5Z/yVBXP8mRF//J0ln/yZLa/8kTG3/Ikpt8Bs6WroKFR91AQICZgAAAGcAAABmAAAAZwAAAGgAAABoAAAAaAAAAGgAAABpAAAAaQAAAGkAAABpAAAAaQAAAGkAAABpAAAAaQAAAGkAAABpAAAAaQAAAGkAAABpAAAAaQAAAGkAAABrAAAAbgAAAG4AAAB2AAEBlAECAs4BAwP4AgQE/wMFBf8EBgf/BAYH/wUHCP8FCAn/BgkJ/wcICv8GCQn/BwkK/wcJDP8HCgv/BwoM/wcKDP8HCw3/BwsO/wcMD/8HDA//CA0Q/wgPEv8LFBf/Hywz/0JZZf9ihI//d52o/4Wrtf+bv8z/rdXg/7vl6f/I8fH6ye/vdltbWQ0hIiMCd4CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAwAAAAYAAAANAAAAFQAAACAAAAArAAAANwQJDk4SIDHKGCk9/xwvRP8eMUb/HjFC/x8xRf8hNEn/ITdL/yM6UP8kPFT/JkFc/yhHXv8pTGj/KVFw/ylSdf8oUnr/JE51/xk4U70ECQ1vAAAAaAAAAGkAAABoAAAAaAAAAGgAAABoAAAAaAAAAGgAAABpAAAAaQAAAGgAAABoAAAAaAAAAGgAAABoAAAAaAAAAGgAAABoAAAAaAAAAGgAAABoAAAAaAAAAGwAAABuAAEAgwACArcBAwTuAQQF/wMGBv8EBgf/BAcI/wUJCv8GCgr/BgkK/wcKC/8ICgz/CAsN/wgLDf8IDA7/CAwO/wkND/8JDQ//CQ8Q/wkOEP8JDxD/Cg8S/woQE/8LERX/CxQY/wwWGf8QGiD/Gigv/zhRWv9iho//h624/6LI1f+34Or/wurs/8nv78XD3NwkJBoaBQAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAwAAAAUAAAAJAAAADwAAABcAAAAiAAAALgAAADoAAABFAgQHVg4aKMETITL/FiMy/xYjL/8VIiz/FiEt/xcjMP8XJjP/Gys8/x4wRP8iOlH/JUJb/ydLZf8qUW7/LFR3/ytWff8mU3j/HUNj4QgTG3kAAABoAAAAaAAAAGgAAABoAAAAaAAAAGgAAABnAAAAaAAAAGgAAABnAAAAaAAAAGgAAABoAAAAaAAAAGgAAABoAAAAaAAAAGgAAABnAAAAaAAAAGgAAABpAAAAcwABAZoBAgLaAgUF/QMGBv8EBgf/BQgJ/wYJCv8HCwz/BwwM/wgMDf8IDA7/CQ0P/woND/8KDhH/Cg8R/wsPEf8LEBL/CxAT/wwREv8MEhT/DRMV/wwTFv8NExj/DhUZ/w8WG/8PGR7/Dxsh/xEeJf8TIir/Fiox/yY/R/9Kbnb/e6Wx/6vY4P/A6+71w+XmZF5XVwgVFBQDAAAAAgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAgAAAAUAAAAJAAAADwAAABUAAAAdAAAAJwAAADEAAAA7AAAARQAAAE8AAQFWCBAYmg0ZJfkPGiX/EBkj/xMeKv8UICv/FSIv/xcmNP8ZKTn/Gis7/xssPv8dMUX/ITpP/yZFXf8pT27/KlV6/yZSdv8eQ2PhCRQdeAAAAGcAAABoAAAAZwAAAGcAAABmAAAAZwAAAGcAAABnAAAAZwAAAGcAAABmAAAAZwAAAGYAAABmAAAAZgAAAGYAAABnAAAAZwAAAGcAAABnAAAAaAABAXwAAwO3AgQE8gMFBf8EBgb/BQcI/wYJCv8HCgv/CAwN/wkNDv8JDQ7/Cg4Q/woPEf8LEBL/DBET/w0RFP8NEhX/DhMV/w0TFf8OFBf/DxQY/w8WGf8QGBr/ERgc/xIaHv8TGyD/FB0j/xUhKP8WJCv/GCgw/xotNf8bMTr/HjZB/yBATP8sU2H/RHOB/2yfr7B+pKsdGBcUBQAAAAMAAAACAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAQAAAAIAAAADgAAABYAAAAeAAAAJwAAAC8AAAA2AAAAPgAAAEYAAABOAAAAVAAAAF4BAwWTBAgM8QMHCf8DBQb/BAcJ/wUJC/8IDBD/DBMb/xAZJf8UIS7/GCo8/xsvRv8dNUz/HzpR/yJAWP8jR2T/I0hq/xw/XdYHEBd0AAAAZgAAAGcAAABmAAAAZgAAAGUAAABlAAAAZgAAAGYAAABmAAAAZgAAAGUAAABlAAAAZQAAAGUAAABlAAAAZQAAAGUAAABlAAAAZgEBAW4BAgKTAQQF1QIFBv0EBwf/BQgI/wYJCv8HCgz/CAwN/woODv8LDxD/DA8R/wwQEf8MERP/DRIU/xAUF/8PFRf/DxUY/xAWGf8RFxr/ERca/xMZHf8TGh7/FBse/xUdIf8WHyP/FyIl/xgkKf8aJi3/Gisv/xwwNv8eMjr/ITdA/yM+SP8lQ1D/Jk1a/yhUZf8nWmniJ1dqQh0sMAcFBwYDAAAAAgAAAAEAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAABAAAAAgAAAAEAAAACAAAAAwAAAAQAAAAGAAAACwAAABMAAAAcAAAAJQAAAC4AAAA2AAAAOwAAAEAAAABGAAAASgAAAFIAAABiAAAAqgABAfAAAQH/AAIB/wABAf8BAQL/AQIC/wECAv8BAgP/AgQE/wMGB/8FCg3/CA4U/w0XIP8SIjD/Fis8/xo1T/8cOlb/FS1CxQMIC3MBAgJnAAIBZwABAWcAAABkAAAAYwAAAGQAAABkAAAAZAAAAGQAAABkAAAAZAAAAGQAAABjAAAAYwAAAGMAAQBjAAEBaAEBAXUBAgKVAgQExQMFBvIEBgf/BQcH/wcICv8ICw3/CQ0O/woOD/8MDxH/DBAR/w0SE/8OEhT/EBQW/xAUF/8QFRj/Exga/xQaHf8TGB3/Exoe/xUcH/8VHCD/Fh0j/xggJP8ZIib/GyQp/xwmLP8dKi7/Hy0z/yIxOP8jNDv/JjpC/yY9R/8oRE//K0lX/ytRYP8tW2r/L2N0+jBjc4AiRU8MBAoLBAAAAAQAAAABAAAAAQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAIAAAADAAAABAAAAAUAAAAGAAAABwAAAAgAAAAKAAAADAAAABAAAAAWAAAAHwAAACkAAAAyAAAAOAAAAD0AAABBAAAAQwAAAEgAAABNAAAAXwABAbUAAgH7AQIC/wECA/8BAwL/AQIC/wECAv8BAgL/AQIE/wIDBf8BBAX/AQUH/wEFB/8CBQj/AgYK/wIIDP8ECw//BxAY/wgTHv0GEBjgAgsQwgIMELICDBClAgsPmAMJDYoCCQx+AgcLfAIFCXoCBgl6AgUHeAEFB3YBBQh4AQUIeAEHCnsCCQ2FAgoOlgEGCKYBBAXAAgME3gMEBfYEBgf/BggJ/wYJCv8ICgz/CgwP/wsPEP8MEBH/DRIT/w4TFf8PExX/EBUX/xIWGf8TGBr/FBoc/xQaHP8UGx3/Fh4g/xcdIf8WHiP/GSEl/xkiJv8aIyj/HCUr/x4oLv8gLDL/IS4z/yIxOP8mNz7/KDtD/ys+R/8uRlD/L0tW/zFSXf81WWj/M15v/zNmd/83b4G3LF5vIAgOEAYAAAADAAAAAgAAAAIAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAABAAAAAgAAAAMAAAAEAAAABgAAAAkAAAALAAAADQAAAA8AAAARAAAAEgAAABUAAAAYAAAAHAAAACMAAAArAAAAMgAAADgAAAA8AAAAPwAAAEEAAABDAAAASAAAAFMBAQGkAAEB+gECAv8BAgP/AgME/wEEBf8BBAf/AQQH/wEFCP8BBQn/AgYM/wIHC/8BBw3/AggO/wIJD/8CChD/AgoS/wILE/8CCxT/Aw0W/wMOFv8DDxj/AxAY/wMSGvoFExz2BRMd8gUTHu0FFCDpBRMf4wQUHuMEFB7gBBMe3gMSHeIEEh3jBRMe6gUUH/IEFB/3AxIa/QMOFf8DCg7/BAkL/wUJCf8HCQr/CQsN/woOEP8LEBH/DRET/w8TFf8PFRf/EBUX/xMYGv8UGh3/FRkd/xYcH/8YHyP/GCAk/xkfJP8bIyj/GyMo/xskKf8eJy3/Hiov/x8pLv8jLjT/Iy82/yU0Ov8oNz3/KjtC/y1ASP8ySFH/MkxW/zNRXP82V2T/OV5t/zxmd/86aX3/OnGE4zlvg0YTKCsGAgMCAwAAAAIAAAABAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAwAAAAQAAAAFAAAABwAAAAoAAAANAAAAEAAAABMAAAAWAAAAFwAAABgAAAAaAAAAHQAAACAAAAAlAAAAKwAAADAAAAA0AAAAOAAAADsAAAA9AAAAPwAAAEIAAABGAAIBfAECAvABAgL/AQME/wEEBv8BBQj/AQUK/wIGCv8CBgr/AgYL/wIHDP8CCA3/AQgO/wIIDv8DChD/AgsR/wMLEv8DCxP/Aw0U/wMOFv8DDxj/AxAa/wQRG/8EEx3/BBQg/wUVIv8GFiT/BhYl/wYYJ/8HGSj/Bhko/wYbK/8HGyv/Bhsq/wYZKv8GGSj/Bhko/wYYJv8FGCX/BRck/wYVIv8FFB//BREZ/wYNE/8HCw7/CQ0P/wwQEf8PFBb/Ehca/xIZG/8VGx3/FR0f/xceIf8YHyL/GiEk/xsiJv8eJiv/HCUq/x4nLP8fKC7/ISww/yItM/8kLzb/JTE3/yc0O/8pOD//LDxE/zFCSf8yRk7/NEtU/zlVXv85WGL/PV1q/z5kc/9Aanv/P3OC/z93i/o6dYp/K1FgCwkODQIAAAADAAAAAQAAAAEAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAGAAAACAAAAAkAAAALAAAADQAAABEAAAATAAAAFgAAABcAAAAXAAAAFwAAABkAAAAbAAAAIAAAACUAAAArAAAALwAAADMAAAA2AAAAOAAAADkAAAA8AAAAPwAAAFEBAgPCAQMF/wEGCP8BBgv/AQYL/wEGC/8BBgr/AgYL/wIHDP8CBw3/AggO/wIIDv8CCRD/AgkQ/wMKEP8CCxL/AwwU/wMNFv8DDhf/BBAa/wQSHf8EEyD/BhUl/wYXKP8HGSz/Bxou/wcbLv8IHC7/CB0w/wcdLv8HHi//Bx4w/wgeMf8IHzP/CB8z/wcgMv8HHzH/Bx8x/wYeL/8HHC3/Bxsr/wcbKP8HGyn/Bhcl/wYXIv8HFBz/CRIX/wsRFP8OFBb/FBse/xceIf8YICL/GyMl/xwmKf8cJSr/HScs/yIsMf8hKy//ISsx/yMvN/8mMzj/JTI3/yk3Pf8rOUD/LT1F/zFBSP80RU7/OUxV/ztSXP8+WGH/QV5o/0Rlb/9Ha3j/R3OC/0J1h/9Fe4//Q3+TsjhxhR0JERIEAQAAAgAAAAEAAAABAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAcAAAAJAAAACQAAAAoAAAAMAAAADgAAAA8AAAAQAAAAEAAAABAAAAAPAAAAEAAAABMAAAAZAAAAIQAAACgAAAAtAAAAMAAAADIAAAA1AAAANwAAADgAAAA9AQIDdgIFCPICBwz/AQgN/wEIDf8BBw3/AQcM/wIHDP8CBwz/AggN/wIIDv8CCQ//AgkP/wMKEf8CCxH/AgsS/wMNFP8EDhf/BBAb/wUTIf8GFij/Bxgt/wcaMv8JHzn/CiRC/wspS/8MK1D/DCxP/wsrS/8KJkT/CSM9/wgiOv8JIjn/CSI4/wkjNv8JIjf/CSM3/wgjN/8IIzj/CCQ4/wgjOP8IIzf/CCEz/wghMf8HIDD/CCAx/wggMP8HHi7/Bxsm/woYIP8OFhz/Ehgb/xcfIf8dJin/Hygt/yAqL/8iLDP/JDA2/yUxNv8nMzj/KTY8/y09Qv8sO0H/MEFH/zFBSP81R07/OEtS/ztQWv8/V2D/Q15p/0Zibf9KaHX/THB//012hv9Lfo//SYOV/0eFmtw+fZI/FC04AwQGBAIAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAABQAAAAYAAAAGAAAABgAAAAYAAAAHAAAABwAAAAgAAAAIAAAABwAAAAgAAAALAAAADwAAABcAAAAeAAAAJQAAACoAAAAtAAAALwAAADEAAAAzAAAANgAAAD0CBgugAQgP/wIJD/8BCA3/AggO/wIJDv8CBw3/AggO/wIIDf8CCA7/AgkP/wIJEP8DChH/AgsS/wIMFP8DDRb/BBAd/wYTI/8HGC7/CR46/wohPv8LJkf/DClP/wwtVP8QPG3/E0iB/xNMhf8TT4j/EkyD/w8+av8OOGL/DjVc/w4yVv8MLk3/CyhD/womPv8JJjz/CSY7/wknPf8JJz3/CSg//wooP/8KKT//CSk//wkpP/8JJzr/CCY3/wgmOP8IJzj/CSY4/woiMP8LHin/Dhwi/xQeIv8bJCj/ISsx/yUxOf8nNTv/Kjc9/y08Qf8vPkP/M0RI/zVGTf81R07/OUtT/z9TW/9DV2L/Qltl/0Vibf9ObXn/TW16/1N2hP9Pe4v/T4KR/02Imv9Ni6L0RoidayNXZwgOHyACAAAAAgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAwAAAAMAAAAEAAAABwAAAAwAAAASAAAAGQAAAB8AAAAkAAAAKAAAACsAAAAsAAAALgAAADAAAAAzAAIDQgIJEL0CChH/AgoR/wMKEP8CCQ//AgkO/wMIDv8DCRD/AwgP/wMJEP8DChH/AwoR/wMLEv8DDRb/BRAe/wcVKf8IGjP/CiE//w0rU/8OL1n/DjBZ/w8yXf8QNmL/Ej9u/xZTi/8aYqH/GmOh/xxrqv8ZYZz/FFGC/xRPf/8UTn//FVWH/xVbjf8TTnr/Dz1i/wwwTP8KKUL/CihC/wopQf8KK0P/CyxE/wosRf8LLkb/DC9I/wsvSP8KLkX/Ci5E/wktQP8JKj7/Cys+/worPP8LKjr/DCc0/xEiK/8ZJSv/Ii0z/yk4Pv8vP0X/MkRK/zVITv84S1D/PE5W/z9TXP9DWGD/RFpi/0tjb/9Nanb/Tmx4/1Rzgf9WeYn/VoCP/1OFlv9Sjp7/UJGk/k2Pp5U+eZISDRsnAwAAAAEAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAIAAAADAAAABQAAAAcAAAALAAAAEQAAABcAAAAcAAAAIAAAACMAAAAlAAAAKAAAACoAAAArAAAALQAAADAAAwVEAgkRxgMKE/8DCxP/BAoS/wMLEv8DChD/AwoR/wMKEv8CChH/AwsS/wQMFP8DDRX/BBEb/wYVJf8JGzT/CyNG/w4rVP8QM2P/Ejtx/xNAd/8VPm7/G0d1/yJPfv8nWYn/LXKn/zB+s/8xg7j/Moa8/y54qv8oapb/I2eU/x9mlP8edaX/HYG0/xt8sP8YcqT/FFqG/w9AY/8NNFL/DC5I/wwsRv8MLEb/DC9K/wwxSv8MMkv/DDRO/ww1UP8MN1D/CzRL/wsxSP8LL0T/DDFI/wwxRv8MM0f/DDFE/w4uPf8VLTn/Hy84/ys6Qv84SlL/O09X/z5TWv9DV2D/SF5o/0xmb/9OaHH/UG15/1R0gP9XeYb/Wn6P/1uElv9Yipv/WZGk/1qYqv9SmKzARIiiJAIgJwICAAICAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAADAAAABAAAAAYAAAAJAAAADQAAABEAAAAVAAAAGQAAAB0AAAAfAAAAIQAAACMAAAAkAAAAJgAAACgAAAAqAAAALgACAzoCCxKzAwwV/wMOFv8EDRX/BA0U/wMME/8DDBP/AwsT/wMMFf8EDRX/BA8Y/wUTIv8IGTH/Ch87/w0mSv8PMFz/ETdq/xU+d/8cS4L/JVWJ/yxYhP8xXYf/NWWP/zhumP88gK7/QYm3/0SPuv9Fkbv/Q4Os/0GCp/9Agqf/Poer/zqavv8zoMf/K5zF/yKTvf8adqD/FmGM/xRYgf8SS3H/D0Bg/w01UP8MMUv/DDNM/ww2T/8NN1L/DTlT/w46Vf8OOlX/DTtV/w85VP8POVT/DThR/w84Uf8OOlD/DjpQ/xA9Uv8UOkz/HDlH/ys/Sf89T1j/RFpk/0xjbv9QanP/VHF5/1V1ff9Ye4b/Wn6L/16EkP9hipz/YZGk/1+Wqf9cna//WqC021GXq0MVP00EBBkaAgAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAACAAAAAwAAAAYAAAAIAAAACwAAAA4AAAARAAAAFAAAABcAAAAZAAAAGwAAAB0AAAAfAAAAIAAAACIAAAAkAAAAJgAAACcAAAAqAAABLwMLEoUEDxj8AxAZ/wQOF/8DDhb/Aw0V/wQOFv8EDBb/BA4X/wYRHv8GFyr/CR46/wsjR/8NJ07/Di1V/xE4Zv8YQnX/JVCB/zBeiv81ZYv/OWeL/0FvkP9Fdpj/ToKj/1WPrv9Vj7D/Wpe2/1iSs/9Rh6r/S4Wo/0iGqf9LkrL/TqjI/02y0f9KstL/PqbI/y2Iq/8hd53/GnKZ/xhxmf8YeqH/F2uQ/xFObv8OOlb/DDVP/w03Uv8OO1b/DzxY/w8+Wv8OP1z/EEJe/xBDYP8QQVz/EEBZ/xA/Wf8QQlz/EkZf/xVKY/8WS2L/GEld/ydIVv86U1//TWVw/1dze/9aeIL/Xn6L/2CHkv9iiZb/ZY+e/2SUpf9jnK7/ZqG3/16nuu1WobZgLFlpCAgSEwIAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAgAAAAQAAAAHAAAACQAAAAwAAAAPAAAAEQAAABMAAAAUAAAAFgAAABgAAAAZAAAAGwAAABwAAAAeAAAAHwAAACEAAAAjAAAAJQAAACcAAAArAQYKRgMOF8gEEBr/BA8Z/wUQG/8FEBr/BREZ/wQQGv8GEyH/CRw1/wsiRf8MKE3/DStQ/w8tVP8WOWD/KlZ7/0Bykf9RhZ//Xpes/2yktP91qrr/fa++/4Kzwf+KuMf/kbzH/5W7yv+bwM//n8DP/5m8y/+Ir8T/daK7/2Geu/9WpcT/UarJ/1Gvzf9Pp8X/SZm2/0CSsP8yjKv/JZCt/yCjvv8dn73/HIuw/xdpj/8RSmr/DzxX/w46VP8OPVj/D0Fc/xBCX/8SRmP/Ekll/xJIZv8USmf/FEpl/xNKY/8UTGb/FlBq/xhUb/8XV3D/GVpx/yJbcf8zYHH/TG56/15/jf9mi5n/aJGc/2yZpP9rna3/aKKy/2Smuf9kqcD1W6e+eTuAjw0GGyMDAAAAAQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAIAAAAFAAAABwAAAAoAAAAMAAAADgAAABAAAAARAAAAEgAAABMAAAAUAAAAFQAAABcAAAAYAAAAGQAAABsAAAAdAAAAHgAAACAAAAAiAAAAJAAAACYAAQIrAwsRWQQRG9QEEh3/BhIe/wURHf8FEx7/Bxcn/wofPP8NKU//EC1X/xAvVv8dQ2X/O2eF/1aLov9rqLb/dLK8/3q0wP99tcH/grbC/4i4wf+Ou8X/kbvF/5m/yf+dwMv/o8TN/6nI0/+vytX/tdDY/7jU2v+20tn/rMvX/5K+0P90sMn/W6XD/1Gbuf9PmbT/Tpy2/0uguP9FscT/Ob7P/yq5zP8iq8T/HYqt/xlymf8VYYX/Ekxs/xBAXf8QQFv/EkVh/xNJZv8TSmj/E01q/xRQbf8VU3D/FlRw/xZUcP8YVnH/GFp0/xpeeP8cZID/HmuF/yNvif8ucon/QnqM/2GNmv9tmab/cKOv/26ouf9rqr//aK3E+mOsxo5KiKEUDRoiAwEECAEAAAABAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABAAAAAYAAAAJAAAACwAAAA0AAAAOAAAADwAAABAAAAAQAAAAEQAAABIAAAATAAAAFQAAABUAAAAXAAAAGAAAABkAAAAbAAAAHAAAAB4AAAAgAAAAIgAAACQAAgIoBQ4WZQYTIOcGEx//BRMh/wgaLv8MI0P/DytT/xIyXv8eRW3/Q3OR/2ajs/90tMD/eLPB/3axu/96s73/fbS9/3+yvP+Fsr7/iLW+/4+3wv+UuMP/mbvE/57Ayf+kw83/qcXR/63H0/+yzNX/t9DY/7zS2f+/1tv/xNnf/73U3f+lyNX/fa7D/1mZtf9NmLP/UaS7/1O+zf9Uytf/SsrX/za5yv8jlLD/HYao/xuBpv8be6H/GnKW/xZXdv8TR2L/Ekhj/xRMav8VUG3/FlNx/xdXdf8YW3r/GF58/xphfv8cYn3/HWaC/yFsif8gdpH/JnyY/yaEoP8nh6H/OIyg/1eaqv9qp7b/cLDC/2+0yfZqsciTV569GQUeLgMCAwMCAAAAAQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAEAAAABgAAAAkAAAAKAAAACwAAAAwAAAANAAAADgAAAA8AAAAPAAAAEAAAABEAAAASAAAAEgAAABMAAAAUAAAAFQAAABYAAAAXAAAAGAAAABkAAAAaAAAAGwAAAR4BAwYmBRMekAUXJP0IHjH/DCdJ/w8tV/8WOWP/NmWI/2Sluf95u8j/ebnE/3i0wv91r77/eK26/3yuu/+AsLz/gq67/4evu/+JsL3/jrLA/5O3xP+YucP/m7vG/6G+y/+mwMz/qsXQ/63K0f+yzdP/t87V/73S2f/B1dz/xdne/8rc4f/G2+H/qsnX/3quxP9XpL7/UrjN/1jG1v9Yytr/Ub3N/0Gkuv8tl7L/IJCv/x+Xt/8hpsb/IJi8/xx4mf8VVnH/Ekpm/xRQbf8WVXP/GVl5/xleff8ZY4L/HGqI/x9vjf8gcZD/JHeV/yaAmv8oiaP/J5Kt/yiWrv8un7b/NKO4/0mqv/9mssbpb7nMfFOXqBgDFR8EBQwUAQAAAAEAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAMAAAAFAAAABgAAAAcAAAAJAAAACgAAAAsAAAAMAAAADAAAAA0AAAANAAAADQAAAA0AAAAOAAAADgAAAA4AAAAPAAAADwAAAA8AAAAPAAAAEAAAABAAAAAQAAAAEAAAABIEEx47Bx0w2w4sUP8PMl//G0Jt/0uFov95vsz/gMXP/328yP94t8P/eK/C/3muvv97rLn/fau4/4CsuP+Errj/h7C8/4uyvf+PtMD/lLfD/5e5w/+avMb/n8HL/6LAy/+oxM3/q8fN/7DK0P+0zdP/uc/V/77T2f/D1tr/yNne/8zd4f/Q3+T/zN3i/6rN2v92u9L/V7bP/1a80v9Wtcr/Va7D/02qwP86orz/Ka3F/yS70f8jt9D/I6vJ/x6Iq/8YZ4j/FFVx/xdUcf8ZW3v/G2KA/xxohv8ebo3/IHaV/yWAnv8mhaL/J4mm/yuRq/8wnbb/LqS9/y+uxf80tcz/ObvSyka4z1NWorkNDCIsAwIFCQIAAAABAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAIAAAAEAAAABQAAAAYAAAAHAAAACAAAAAkAAAAJAAAACQAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAGAAACBwUUJBIMMFajETtp/x5Mdv9ZnLP/g8rX/4TJ0/9/wcv/fLrH/3q0wf97scH/fbC//36uvP9/rrr/hK66/4euuv+KsLz/jbO+/5G2wP+Wt8L/mrnE/5y8xv+hvsn/pcLM/6rGz/+tx8//scrQ/7TL1P+4z9X/vdPZ/8TW2//H2Nz/y9rf/9De4f/X4eT/1+Lm/8vd5v+ey9v/Z7LL/0+kvv9WqsL/WbDE/1azyP9Jw9P/M8bW/yjE1f8lt87/IZy9/yGQtv8fgKT/GmiI/xpefP8cY4H/H2uL/x5ykf8he5n/Joaj/yeQrP8nl7T/LZ65/zSlv/80r8f/NLjP/zbA1806xt1ALq3CBRVLbgEICQoBAAAAAQIEBQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAIAAAADAAAABAAAAAUAAAAFAAAABgAAAAUAAAAFAAAABAAAAAQAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAACAAAAAgAAAAIAAAACAAAAAgAAAAEAABQBEDdsChI/dJscTn7/XKG7/4zb5P+Kz93/hMXT/3+/yv99ucX/fbXA/3+ywP+Asb//gq69/4Wuu/+Kr7z/ia+9/4ywvv+StMD/k7TA/5e1wv+cusb/nrzG/6XAyv+qw83/rcbO/6/J0f+zzNL/t83V/7rQ1f++09j/w9bb/8fV2//M2t7/0Nzg/9Pe4//U4eP/2OTm/9nj5//D2eH/iLrP/1elwf9TqsT/WrrN/1zO2/9T0N7/PcvZ/yq3y/8kpL//JJ/B/ySewP8lnsH/JI6w/x1zkf8dbYz/IHaU/yN/nv8oiqj/KZay/yqivv8urMf/MbLM/za30P86wNfmO8bcXEDO5wYJfqMBAAAAAFKxygAAAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAACAAAAAgAAAAMAAAADAAAAAgAAAAIAAAACAAAAAQAAAAEAAAABAAAAAQAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAADIgAAXTIUPF0t/qlCStP+V5O3/kNrl/4vM3f+ExdT/gr7L/4K4xf+CuMT/g7TB/4W0wf+Isr//ibC9/4qvvP+Os8D/kbTA/5m4w/+YuMX/m7rG/5+/x/+jv8j/qcTN/6vFzf+xxs//tcvS/7jO1P+80df/v9PX/8DU2P/G2Nr/ydjd/8zb3//S3eL/09/j/9Lg4v/Y5OX/3Obo/97n6//X5Or/r9Hb/2uxyf9Ttcz/Xcrc/2DR3/9c0N3/R7nN/y6pwv8mpsT/JanG/yq61P8sv93/Ka3O/ySOrf8ifZv/JISh/yeOq/8rm7b/LqfB/zGyzP80vdb/NsPb+zzJ3phAzuIVFbfsAWwyegAIUFcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCg7AAAAAAAB1ZkBVEhq+6kuDs/5/q9P+R2uf/i87b/4bF0v+IwM7/h7nH/4W3xf+CssD/iLXC/4uzwf+NtMH/kbTA/5O1wv+VuML/nLrF/569yf+hwMn/pcHI/6rFy/+sxcz/r8XP/7bL0f+8zdT/vM/U/7/P1v/D09r/xtfc/8rW2f/M2dz/ztvf/9Te4f/T3uH/1uLk/9rk5//c5Oj/3+fq/+Lp6//j6uv/zt/n/5LJ3P9evtn/Wsbb/2DK2/9cvdL/ULbM/zauyP8oscr/K8jb/y7P5P8vzOb/Lrza/yyiwv8qk6//KZSw/yyfuf8wq8T/NrfR/zbC2v85y+HaQtLlRlHd7gSJ/+YALtDuABvs/QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7P//ADLW9AD///8Aj9PiJ5nj7ter9Pv/oOXw/5ba6P+NzNv/isXQ/47Azv+Ku8r/iLjF/4a1wf+KtcL/j7bD/5G3w/+VuMP/mLnF/5y9yP+jwcz/o8PL/6rFzf+rxc3/scnR/7TM0f+4zNP/vM/V/8DS1//C09j/xNTY/8bY2//L2t3/z9vd/9Db3v/T3uH/1d/h/9jg4v/a4+T/3eXn/+Dm6v/i5+v/5Ors/+fp7P/o6uz/4uvv/7Tb5/9twtr/WLfT/1250f9ivtL/V73R/z7A1P8x0OH/L9Xl/zDV6P8vx+D/MsHc/zG51v8uq8j/LqjD/zSvyv84utT/NsTd+zvN5JxH2OkXLN7aATfe4ABumP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADj//8A//7/APL+/gHO//9kvP//+K72+/+g4+7/mtbi/5XO2/+PyNP/kMLP/469y/+Qu8b/jrnD/5C5w/+UvMb/lLvG/5q6xP+hvsj/pcDL/6jEy/+rxc//sMjQ/7PL0v+4zdX/u8/U/7/Q1f+/0NT/w9PZ/8fW2v/L19v/zNrc/9Db3v/R297/1N7h/9ng4f/Z4uP/2+Lj/9/k5v/g5ef/4ebo/+Tn7P/n6uv/6Ovr/+vu7f/r7/L/6vDx/8/k6v+Mxdr/W7LQ/1+71P9lw9j/YdPi/0vZ5/812Of/MNPl/y/G3v8yx+D/Ncvm/zbN6f82yub/N7/b/za/2f80xt7oOczjWkrZ6AYAj6IALMHYAE+w9gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7f//AOT//wAA//8A2P//EM///63A/v//rvP7/6Li7v+c1uL/mtLe/5XI1P+VwdD/k7/O/5K8yP+TuMX/k7jD/5e9xv+bvMf/ob/I/6XAyv+qw8z/rMXN/6/Hz/+1zNL/uszU/73O1v/Bz9X/w9LW/8XU2P/J2Nr/ztnd/9Dc3v/T3OD/197h/9ng4//c4eT/3+Pk/9/l5f/f5eb/4ubn/+Xp6P/k6Oj/5+nq/+rq6//s7e3/7e7v/+7v8f/v7/H/7vHx/+Tt7/+q0eT/ZrjU/16+1/9p1eX/aODs/1Pg7P860OT/McXd/zHK4f810uj/Od70/zvp/v895Pn/Otbt/znO5b9B0+UoK9viAWrY4QAQ0eYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADz//8Aqv//AP///wDV//8vy///4rz8//+x8vz/qOXx/57Y5P+b09//nMza/5fE0f+TwM3/lb3J/5i9yf+ZvMj/ncDJ/6HAyv+mw8v/qsbN/7HK0P+zytH/uM3T/7vP1v++0Nf/wtLY/8fU2v/J2Nr/ytnb/9Db3f/S3N7/1d/g/9rf4f/a3+H/4OXm/+Lm5//j5ub/5eXn/+bn6f/m6er/5+rq/+rr6v/q6+r/6+zq/+zt7f/u7u//7u7u/+7x8f/w8fH/8/Lz/+/z9P/G4uz/esri/2PO5/9t2+7/buLw/1rS5v87x9//Mcrh/zXU6v876fn/PPb//0L5//9I9//8Re37j0jg9Q4A/+4ANOT1AB/L5gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANX//wDW//8A6///AdX//2LJ///4uv7//7by/f+s5e//pNrk/6TV4f+fy9j/m8fT/5jEzv+cws3/nsLQ/6DDz/+nx8//qMTN/6rEy/+vyc//ts3S/7vP1P+9z9X/wNHX/8TU2f/J1tz/y9jb/8/a3v/U3OH/1t/h/9nh4v/c4+T/3uTm/+Hl5v/l5+f/6Orp/+fq6v/p6er/6Onq/+jq6v/m6Oj/6urq/+rs7P/q6+v/6ert/+zr7f/r7e3/7e/u/+/x8P/x8vH/8fTz//T29f/c7/b/ktjt/2jR6P9v1+v/cdLn/2HO5P9CzeT/Ntfs/zru+/89+v7/Qf7//0j///NM/v9rTvf/Br///QA3+P8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzv//AP///wDX//8F0///jsn///+7/P//s+36/67l7/+q2+j/qNXi/6TO2v+eyNT/n8fT/57Dzv+gw9D/pMXQ/6jGz/+pxMv/scbO/7bM0/+7z9f/wdDZ/8TU2P/H1tr/ytfb/87Y3f/Q2+D/1+Dh/9vj4//d5OT/3uTn/+Hk5//m6On/5+fo/+jo5//p6ur/6err/+nq6v/q6+n/6enp/+fn5//p5+n/6urq/+nq6v/n6ur/6uzr/+zt7P/t7uz/7u/v/+/w8f/v7/D/8vLz//b2+P/l8/b/qt7s/3HG3/9tx+D/dNPo/2vZ7f9J3/L/PfH7/z77/v9C/v//Rv396Uj3/UxH9fwDX/P9ADv6+wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADR//8A/v//ANj//xHS//+wyv///779//+17/b/sePv/67d6f+o0+H/pM3c/6LK1v+lydT/pMjR/6jI1P+tytP/r8rS/7PJ0P+6zNP/vdDY/8HR1v/G1dn/y9bZ/83a3P/P2t7/1N/i/9fh4v/c5Ob/4OTm/+Lm6P/k5+j/6ejq/+jq6f/p6+z/6Onq/+jq6f/q6un/6erp/+vr6//q6un/5+jo/+fn6P/m6Oj/5+jq/+bn6f/o6ur/6+3s/+7t7f/u7O3/7O3s/+vr7f/v8fP/8fL0/+/w8P/r8vL/vNzo/3i/1v9yzOP/fNvu/3Tr+P9P8/v/Pvj8/z/7/v9B9/zZQ+75Lh7//wFKoK0ADcTEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANX//wD///8A3v//Hdf//8/K////w/v+/7nw+P+05O//q9rk/6TT4P+jztz/ps3Y/6bK1P+qy9T/rs3V/7LO1v+1ztX/u9DX/7/S2f/B09r/xtXZ/8rX2v/O19z/1N3h/9Tf4v/Z4uT/2uHk/+Hl5v/k5+f/6erp/+np6f/q6er/5+rq/+np6//p6er/5+np/+jp6f/o6ej/5+ro/+fp6v/n5+f/6Ofm/+fn6P/n5un/6ebn/+np6f/s7e3/7ezt/+rr6//n6Oj/6Ojn/+jp6v/n5+b/6Ojo/+jq6v/n7O3/xdvk/4XF2v930un/guz3/3z3+v9V9vn/QfT6/z3s+b852O8eAAkAAQAAAAAAAgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD2//8A2f//APf//wDc//8m1f//5M3////J/P//wPH7/7bk7f+s2+X/ptDb/6bO2f+rzdj/q87Y/6/M1v+wzdT/ts/W/7nT2P+81Nn/wNTY/8fW2//K2N3/zNrc/9Td4f/X3+P/2+Lk/9/k5v/i5ej/5ejr/+jq6v/s6+z/6enr/+rq6f/o6uf/6Ojp/+jo6f/m6ej/5+jo/+np6v/n6er/5eno/+bm5//l5+f/5ujn/+fn5//o5+j/6Ojo/+rr6v/p6+r/5ebl/93e3//f39//29zd/9nc2//a3dz/3+Hh/+Ll5P/h5Ob/zt/l/5TR4/973PD/hvD5/4L4+v9W7vf/PN/yoCmYrxIACQYDAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPX//wDk//8A8P//AOn//zXf///q0v///8n8///C7/n/t+Xu/67Z4/+r1N7/q9Lb/6vQ2f+uztf/tNDX/7XQ1/+61Nj/vdXa/8HW2v/F19z/y9fc/87a3f/S3eH/1+Dg/9ng4v/f5OX/5Ofp/+fo6v/n6+v/5urp/+np6//o6On/5+nq/+rr6v/q6en/5+jo/+Xo6P/n6On/5+fq/+jn6P/o6ef/5+bm/+bo5//n5uf/5+fn/+np6f/k4+T/5uXk/9/e4f/a3Nv/19fX/9PU0v/T1NT/0NLS/9LT0//T0tP/19nZ/9rb3f/f4OP/1ODj/6DV5v+G5Pf/ivH4/3zt9f5J0uyBCz5KCwAAAAcAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+P//ADb//wD///8A7f//P9///+3T////zPz//8Pu+P+24u7/r9jk/67U3v+s093/rtLc/7DQ2P+51Nn/utTZ/7vS1//B1Nr/xtfd/8za3v/Q29//1N3h/9je4v/d4uT/3uTm/+bn6v/p6uz/6unq/+nr7P/n6+v/6ejp/+Xo6f/m6en/6ejp/+rp6f/n6Oj/6Ojn/+jo6f/o5+j/6Ono/+fm5f/m5Ob/5ubm/+bn6P/m6Of/5OPk/+Hg4P/i4eH/19fY/9TU1f/Ky8r/y8vK/8PDxP/Exsb/x8jJ/8nJyf/Hycn/vcHC/7rAwf+8w8b/vMnO/6bX5v+N6fr/gOb09U671V4DHSUJAAAABwAAAAUAAAAFAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD8//8A////AP///wHx//8+4///7dn////N+v7/vu33/7Tf6v+w2uT/rtbg/6/S3v+y09z/ttXb/7zV2/+/1t3/wtje/8fX2v/L2N3/0d3g/9bh4v/Y3+D/3OPk/+Tn6P/m6uv/6evr/+vr6v/q6en/6+nr/+zr7P/q6ez/5+rq/+fr6v/q6ef/6ujo/+jm5v/n6Of/5unn/+bo5//m5+X/5ebm/+Xj5//l5OX/5+Xl/+Xl5P/f4OD/3Nva/9nZ2f/Pzc3/xsbG/8HEw/+8vb3/u7u9/7e5uv+2t7b/pKWl/3R2d/9BSUr/Kzc7/yw6Qf89UFf/XWxz/2aOmv9jqL3lOneLRAMRFg0AAgMKAAAACAAAAAgAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP7//wAAAwMA////AfX//z/o///t2v///873/P/B7fX/ut/q/7Td5v+y1+D/sdLc/7PV3v+71t3/v9be/8PZ3//H297/y9vd/9Dd3//V3uH/2eLk/97j5f/j5+j/5efo/+zr7f/t7Oz/6+vr/+rq6//p6ev/6enr/+jq7P/q6+r/6uvq/+fp5//n6Of/6efn/+no6P/n6ef/5+jm/+bo5//m5ub/4+Ll/+bk5v/l5OT/3+Dg/9rb2//Z2Nn/z8/Q/8PGxf+9v73/trm3/7Cxsf+usbL/mZ2d/2dpaP8rLy//EBQW/w0TFP8PFRf/ERkd/xAdIv8THyX/GSct/xksMvoIExXFAwgKbgQICiIDCAkMAAADCgAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+v//AAD//wD///8B9///Pur//+3a/v//zfX7/7/s9f+44ur/uN3n/7XY4P+01N7/uNXd/7rV3f/D1+D/w9Xc/8na3v/Q3uD/0tzf/9ni4//d5uf/4+fr/+bo6f/o6ur/7Ovt/+zs6v/r7Or/6+vr/+rr7f/q6uz/6uvt/+np7P/p6en/6Orp/+no6f/q6Or/6enp/+jo6f/m5+f/5efn/+Tl5v/k4+T/5uXl/93d3v/d3dz/2djX/9DP0P/Hxcb/ubq7/7Gysv+qq6v/oqGi/36BgP83Ojv/DxEU/wsPEv8PFRj/EBkc/xIaHP8VHSL/GCAn/xckKv8ZJy3/GSsx/xUnLP8PHiP5CRQYswcTFkEFCxAQAAIDDAAAAAQAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD4//8A////AP///wD4//8+7///7d39///K9Pv/w+rz/7zi7f+22+T/ttjg/7jX3v+41dz/vNTc/8jb4P/N2+D/z9zh/9Pf4f/V3uH/3ePl/+Dm5//o6+r/6+vq/+nr6//p6ur/6uvq/+vs6v/r6un/6urr/+nq6f/p6ur/6ejr/+jq6v/p6+r/6+ns/+np6f/p6un/6ebp/+Tl5v/m5ub/5ePk/+Xk4//l5eX/2tvZ/9zZ2P/Tz9D/yMjJ/7a3uP+xsbH/qKeo/5ybnP9jY2P/HR4f/wwQEf8OExX/EBUY/xIYGv8SGx3/FR0h/xceJf8ZIyj/GyYr/xsoLv8bLjP/HC82/xowOv8XLDT/DyIo1Q8jKVkFERQUAAQECAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPf//wD///8Am///AP3//zTw///q3v3//830/P/D6/P/vePq/7jc5P+32eP/vNnh/7nX3f/B1t7/y9vg/9Dd4//S3uL/1uLk/9vi5v/e5OP/5Ojo/+nr6//r6+v/6+rs/+nr6//s7Oz/7Ozr/+jo6v/p6er/6enp/+rq6f/q6en/6enq/+nr6f/o6ej/6Ono/+jn5//n5eb/5eTn/+Xj5P/l4+X/4uLj/+Hj4v/Y2dn/09LV/8vLy/+7vbz/rq+v/6ampv+SlZX/VlVX/xQVFv8NERH/DxQV/xEXGf8UGBv/FBkd/xUcIP8YHiL/GSEl/xokKP8cJy3/HCox/x8vNf8eMDf/IDI5/x40PP8ZMzv/FC445BYsNVsHEBMOAQYGBAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA9///AP///wD0//8A////J/X//+Tg/v//0Pb6/8ns8//B4+z/v97n/7za4v++197/vtfb/8jb4v/P3eT/0dzh/9Th4v/c5+b/4Ofp/+To6P/o6ur/6uzs/+rr6//q6uz/6evq/+zs6v/q6uz/6ers/+rq6v/r6Or/6+rq/+np6P/o6On/6evn/+nq6P/n6Oj/6Ojp/+fm5f/k5uP/5uXl/+bm5P/d4N//4uXk/93e3//P0tH/xMbF/7Gzs/+oqar/lpWW/09QUP8TFRb/EBMV/xEVFv8SFhj/Ehkb/xMaHf8UGx7/Fh0f/xkfIv8bIiX/HCUq/x0oL/8fKjD/Hy0z/yAxOf8hMzr/ITU8/x42Pv8cNED/GTI+2A8mMUgECgkHAAMKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4eHhAMnd3QD///8g9P//1eD+/v/U9fv/zev0/8Xj7P/B3ub/vtvk/8HY4f/F2+H/y93j/9Dd4//U4OL/2uXn/+Hn6v/m6On/6urr/+rs6//r6+v/6err/+vs7P/r7ez/6+zs/+zs7f/t7Oz/6uvq/+rs7P/p6+v/6erq/+no6f/o6Oj/6Ojo/+jp5v/n6Of/5+fm/+Xn5f/l5ef/5ebl/+Pk5f/e3t//19fW/8/Pzv+3uLn/qayq/5eYmv9TU1X/ExUX/xASFf8RFRj/EhYZ/xMYGv8TGRv/FRse/xYcIP8XHiH/GiEk/xsjJ/8cJSn/Hiou/x8sMP8hLzT/IzI6/yQ0Pf8jNz//Ijg//x44Qf8aN0L/FTI/shAiLR8AAQUEAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAAAGBgAAAAAAAAAAAP///xf2//++4/7//9X1/f/M6vH/yObs/8Xg5v/E3uT/xtzi/8nc4v/M3uL/09/j/9rj5f/d5uj/5enq/+fr6v/s7Oz/6u3s/+rr6//s6+v/7Ozs/+rs7P/s7e3/7O3r/+vr6//r6+v/6+vs/+rp6//p5+n/6Ofn/+np6v/n6Oj/6uro/+jn6P/m5uX/5ufm/+Xl5v/n5uf/6Ojo/93e3P/V1tX/xMPD/7W0tP+fn6D/X15g/xUXGf8SFRf/EhUY/xIWGf8UGBv/FBoa/xQbHP8WHB//Fx4h/xgfIv8aIib/GyUp/x0mKv8fKi7/IS4y/yMxNv8lNTv/JjdA/yY6Qf8kO0L/ITtF/x46Rf8cN0XzFy8+XgIJDAcAABAAAg0aAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAABAAAAAAAAAAEAAAACAAAAAQAAAAADBAYFt8bIEPD8/KLm+/3/2PX7/8/u9P/H5uv/yeTo/8vi5v/I3eL/ydvf/9De4v/W4uX/2+Xo/+Hp6//n7Ov/6+3u/+3t7//s7u//7O7t/+nr6v/r6uv/6uvr/+zt6//r7ev/6+3r/+vr6v/q6uv/6+no/+vp6v/p6ur/6ejq/+np6f/n5uj/5+fo/+fo6P/n6Of/5uTn/+bm6v/m5ej/2tra/8/Q0f+8urv/ra6u/3R1dv8cHyD/EhUX/xQXGv8TFxr/FBgb/xUZHP8VGx3/FRse/xceIf8XHiP/GCEk/xojJv8dKCn/Hyos/yEsMf8jLzX/JDM5/yY2PP8pOkH/KD9F/yY+Rf8jO0X/IjtF/yA7SP8bND+qESg0EQAADgASIjsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEQJzYAFEFTAAAAAAECCQ0LAwoOIQMKDEQLExV6kZ6f0+H29v/Y8/f/1vD3/83n7f/N5Or/zeLn/83g5P/O4OP/1ePn/9rk5v/d5ef/5uvq/+vu7f/s7O3/7ezr/+7u7f/t7u3/6+zq/+vr6v/s7Ov/7Ozt/+rq6v/s7On/6uvp/+np6v/q6er/6enq/+nq6v/n6On/5+nm/+jo5v/o6ef/5+np/+jp6P/m5uf/5OXn/93d4P/e3t7/zM3N/7a2tf+Oj4//MDM0/xMWGP8VGRv/FBkb/xUZHP8VGRz/FRwd/xYdHv8WHSD/GR4i/xohJf8aIib/GyQo/x4pLP8hKy//Ii4y/yQxN/8mNTv/Kjk//yo8Qv8pP0b/KkBI/yg+R/8lP0j/Ij1I/x04Rd4WMDwtAgAAAhgzPQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAECAAAAAAEAAAACOH+lAAgVHg8HGB9ACx4kbggVGp4EDhHPBQwQ6gUMD/xNWVv/0ufo/9zy9//c8fj/0+fu/8zi6P/Q5Ov/0uTp/9bi5f/Z5en/4Ojq/+To6v/o7Oz/6+3t/+zs7P/s7Oz/7O3s/+zs7f/u7e//7e3t/+3t7P/t7u3/7Ovq/+3s6//s6+v/6+vs/+vp6//q6en/6enp/+fo6f/p6On/6erp/+jq5//o5+j/6ujn/+bo5v/g39//3dzd/9nY2f/Fx8b/pqem/0xMTP8UGBn/Fhod/xUaHP8VHB3/Fhsd/xYbHv8XHCD/GB0g/xgfIf8YHyP/HCMo/xwlKP8dJir/ICku/yMtNP8kMDb/JzQ6/yo4QP8uPkX/LT5F/yxASP8tQUv/KUBM/yRAS/8iQEr/HDlG8xYzPlQEDQ0DGQsYAABFRQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAA8AAAAAAgUAAQMKHiVEDB8ntAwfJe0PJS39Cxwj/wgVGf8HEhT/BQ0Q/yo0Nf+/0dP/3vH0/9ns8P/U6O7/zuTn/9Lm7f/W5er/2ebp/9rn6f/i6+r/5urq/+ru7v/u8O//7e/t/+3u7f/t7e3/7Ozs/+3s7v/u7uz/7Ozr/+zt7P/r7Ov/6+zr/+vq7P/r7O3/6urr/+ro6P/o6un/6Orr/+np6v/q6+v/6evq/+jn6f/s6Or/5+Xl/+Pj4v/d3dz/0NDP/7e5uf90d3b/HSAg/xccHf8WHB7/Fxwd/xcdH/8WHR//Fxwg/xgcIP8YHiH/GiAj/xkgJf8bIyf/HSYq/x4oLP8hKzD/JC40/yYyOP8pNzz/KzpA/y0+Rf8vQUv/L0JL/y5CTP8sQ07/J0JN/yRBS/8dPUf7GTdBcQAJCwYACQAAABUVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAINFwAAAwQAAAAAAQAICAEAAgMEDB4pTgwiLeANJS//DyYv/xEsNv8OKDL/DBwj/wgYHP8GExb/FB0f/5elqP/f7/H/2+zu/9Lk6v/T5uv/1Obq/9Xl6f/e6O3/4uru/+Tr7P/p7O7/7fHu/+7w7//u7+7/7fDu/+7u7v/r7Ov/7e3t/+7t7v/t7u3/6+zs/+zt6//r6+v/6+vs/+vr6v/q6un/6+rp/+rp6v/q6uv/6unq/+rq6v/q6en/7Orq/+3s6//p6ej/5Obl/97h3//Hycf/kZOT/ywvMP8YHB//GB0f/xccH/8XHCD/GBwh/xgeIP8XHSH/Fx0i/xkgIv8aISX/GiMl/xwjJv8eJSv/ISov/yMsMP8lMDT/KTU8/yw6QP8tPEL/MD9H/zNFTf8yRE7/L0RN/y5FUP8qRU//JUJN/x4/S/4aOkh8AAoLCQAHAwEADw8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgoaAAMUKQAAAAQCBBATBgwiLUMQKTbNECk2/xArN/8RLDj/FDE8/xU1Qf8PKDH/DSIp/wobIf8LFxz/YG1y/9zr7P/c6+3/1+fr/9jm6//Y5en/2OTp/+Dq7v/l7fD/6e/w/+zw7//u8e//7u/u/+3t7//t7+7/7e7u/+3s7f/u7ez/7+3s/+3v7P/q7Ov/6+zt/+rs6//t6+z/7ezr/+vr6v/r6uz/6+zr/+rr7P/p6ur/7Ozr/+vs7P/s6+v/7e3u/+rs7f/d3d3/2NjX/6ioqP9AQkP/GRwf/xkdIP8YHR//GR0g/xcdIP8ZHiL/GR0g/xggJP8ZHyP/GiEk/xsjJ/8dJSj/HSYo/x8oLP8jLTH/JS4z/ygzN/8pNzz/Lj1D/zFAR/81RE3/NERN/zVJUv8wR0//L0hR/ypGUP8mQ1H/Hz9O/xk4RogCDAwIAAQCAQAPDwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2a5kADB4qAAYUGggKHideDykz1BMzQf0UMkD/FDRA/xU0QP8aOkb/HT9L/xg2QP8VMjv/ECgw/w0fJ/8vQEb/vMnK/+Xy8//f7O//3+vv/9vm6v/d6ez/5O3x/+nv8v/r8PP/8PLy/+/v8P/v8PD/7+7v//Du7v/v7u3/7u7u/+3s7//t7u3/7O7s/+zs7f/t7O7/6+zs/+vr6v/r7Ov/7Ovs/+3r7v/s6+3/7e3r/+vs7P/u7e3/7u3u/+/u7v/v7+7/5ufn/+Pk5f+6u7r/S01N/xgeH/8bICP/GR8i/xkfIP8ZICH/GB8h/xkfIv8ZHiH/HCMl/xsiJv8bIib/HSMo/x4nK/8gKi3/ISwv/yQwNP8nMjX/Kzc7/yw6P/8wQEb/NUdP/zZFTf83SFD/OExV/zNKUv8vSVL/K0dR/ydGU/8gQk/+FzlDfQIJCwkACAUBABISAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgZIAAAAAAACx4oXg4mMecTM0L/GD1Q/xk+T/8ZPEv/Gj1K/x9CT/8kSlX/I0hV/x9ATP8ZNkD/FCs0/xUrMf+CkJX/4ezt/+Pt8P/k7vP/4+3x/+Pu7v/j7u7/6O/x/+/y8//y8/T/8fDy//Lx8f/w7/D/7u7u/+7u7//t7u7/7e3s/+3t7v/t7O3/7O3t/+3s7v/s7e7/7e3t/+3t7f/t7O7/7ezt/+zq6//t7uv/7e/u/+7u7//u8O//7/Dv/+3t7v/q6en/wcLC/1JWVv8XHBz/HCIk/xshJP8aHyL/GyEk/xofI/8bISX/GiAl/xkgI/8bIyb/HCQo/x0kKP8eJir/Hycs/yEqL/8iLTL/JjE3/yo2O/8uOkD/MT9D/zVDSf84SE//OktS/zdKUf86Tlb/N0xW/zFJVP8rSFX/KEZS/x9BTvsZO0pwAAgJCAACAAIACQkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkkQwAII0IACyItAAohKx0OJjPQEzJB/xk+UP8eSWD/H0pe/x5FVf8gRlb/JEpY/ylSXf8vV2X/K09c/yNDUv8ZN0P/Fi44/ztOVf/Dz9D/6/Hx/+r09f/o7/H/5+/w/+zz9f/q8PP/8vT2//b19//08/T/8/Hz//Hw8P/v8PD/8PDv/+7w7//u7+//7e3t/+7u7v/u7+//7uzu/+7u7//u7e7/7u/u/+7v7f/t7e//7uzw/+/v7v/v8O//7u/x/+/y8P/y8vH/7e3u/8THxv9PU1L/Gx8g/x8kJv8dJCb/GyEk/xsgJf8cISX/GyIk/xwkKP8eJSn/HCIm/x0kKP8eJiv/Hygs/x8oLP8iKy//Iy0y/yQwNf8pNTn/Kzk+/zE/RP82Q0j/N0VL/ztKUv8+T1f/PFBX/zxPWP83UFn/M01X/y9LV/8qSFb/I0NS9B0+TVsABAUKAAEAAgAHBwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCY3AAUmOAARM0gAEDJJVRQ1SvYaQ1j/H05k/yNVb/8jVW3/I1Fm/yNPY/8nUmP/Lldn/zRdb/8zWWr/K1Fh/yJFVf8aOUb/GDA4/3J/gv/j6ur/7fT0/+vz9P/t8vT/8PX1/+/19v/09vf/+Pj4//b49v/z8/T/9PPz//Ly8v/x8vD/8PHx/+/w7//t7u//7u7v/+7w8P/v7+7/7+/v/+/v7//v7+//7+7u/+7u7//v7/D/8PHy//Hy8v/w8fH/6uzs/+Xl5v+sra3/PkFC/xkeIP8gJyn/HyYo/x8lKP8dIyb/HSMn/x4lKP8eJCj/HiUp/x8mK/8dJin/HiYp/yApLf8hKi7/ISwv/yIuMf8lMDX/KTY7/yo4PP8vPUL/NUJJ/ztJUP89TFX/PU5W/z5QWf89UVf/PlNa/zlSXf8zT1r/Lk1X/ylLWP8jRlXqGjVAQwAAAAoAAAADAAcHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQIVAAERFUACZffAAUQFuEGkVf/yFUbv8mYH7/KWN//ylkgP8oYHr/KF11/ytecf8wXXH/M1xu/zVdb/8wW2v/K1Jh/x1AS/8PKi//ITA1/5+oq//w8/P/8fX2//H19f/x9fT/7/T1//b4+f/4+vr/9/n4//T39f/z9PT/8/Tz//Py8f/y8vL/8PDv/+/w7//w8PH/8O/y//Hu8P/w8PD/8PHw/+/u8P/t7+7/8O7u//Hx8f/t7e7/7u/w/+7w7//Nzs//eXp6/yktLP8dISP/IScq/yAnKv8fJir/HyUp/x8lKf8fJSn/ICcs/x8nK/8fJyz/ICgt/yApLf8gKS3/Iiww/yItMf8kLTL/JTA0/ycyOP8rNz3/LzxC/zJBR/83RUv/O0lS/z9QWf8/UFj/QlRd/0BTW/8+VV7/PFNg/zVPXP8uT1r/JkpW/yFGVNMXMT0pAAAABQAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEsTQAIABkADzdWCBxQb54gVnH/I1x3/yxtjP8vcpH/L3KQ/y9ujf8va4X/MGqA/zRqgP80ZHX/L1Zm/ytUYv8mTlz/GTpD/xEtNv8PJi7/NkdK/7vDw//19vb/9fX1//P09P/09vX/9/n5//j5+f/6+vn/9vj2//T29f/z9fb/9fT0//Tz9P/x8fH/8PDy//Hy8v/y8vP/8e/x/+7u8P/v8O//7/Dv/+rt7f/x8vP/8fDx/+vq6f/f3+H/nqKh/0RHR/8cICH/IScp/yMqLP8hKCv/IScr/yAmKv8hJyv/ICcp/x8nKv8hKS7/Iyww/yEpL/8hKzH/Iiwy/yItMv8kLjP/JTA1/ycxN/8oMzr/KjY8/y47Qf8xQEb/NkdM/zhIT/8+T1f/QVJa/0JTXP9HWWL/RVli/0BWYP89VmP/NVNe/y1RXP8nTFr/IURUsxQqNxkAAAIIAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADjpUAAAAAAAPN1kIJWSKkydmiP8kWHL/H1Rm/yZfdvU4fZ3fNnmb2zFviPkxa4D/NWp//zRjc/8oT13/JU1c/yJJWP8eQkr/GThD/xIvOv8VLTT/P1NW/7i+v//19vb/9/j4//T19f/19/b/+vv7//r7+//5+fj/+Pn5//T3+P/z8/X/9PTz//T08//w8fH/8fDw//Hy8v/v8PD/7O/v/+/y8v/r7Ov/6+zs/+/x8f/b293/pqam/1laW/8jJij/ISYo/yMpLP8lKy3/Iysu/yIqLf8iKS3/ISgs/yIpLf8jKS//ISks/yQtMP8kLjL/JC4z/yUwNf8mMDX/JS81/yYxN/8nNDr/KDU6/yw5Pv8wPEL/MT9E/zNCSP83R0//O0xT/0BQWf9DVVz/RFdf/0VZYv9JXmr/Q1tm/0BZZP84VmD/MFNe/ytOX/8hRVaMBgwPEgAAAQkAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAML0wAAAAAAAABBAIrdplNLXSX6yhgfP8YSFr/GkRQnTh7mDQ7gaF5O3yY+DV1jP8xaXz/L1xt/y1ca/8qWWngJ1Bf2CNMWv8hQlH/HDpF/xg1Qf8ULTX/ND9C/6Gipf/p6uv/+Pj4//Ly8v/7+/v//Pz9//j4+P/5+Pn/9vj4//L08//09vT/8vLz/+7v7//x8vL/8/Pz/+zs6v/s7e3/7+/w/+Li4v/OztH/mJqb/1JUVv8mKCn/HyQm/yUsLv8mLDL/JSov/yUrL/8jKi7/JCww/yMqL/8iKi7/Iisv/yMsMP8kLjL/JS80/yYxNf8pMjf/KjI5/yozOv8nMDf/KTY9/yo3Pv8qNz7/Lz1D/zJBRv80QUn/NkVN/zpLUf88TVP/QVNa/0leZv9HWmP/Sl5n/0hdaP9IYW7/Qlxn/zlWYv8yVGL/KVBe9iFFU2MAAQMOAAAABgAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKBwDo//8ABiAjAS11nA4yf6OJLm+H/B5UY+IYQE0/ChMTA0CLrjlGlbbaQ42t/0CGoP88fZT/OHOL/zNofZAlS1g/JVFjqiRNX/ciRlb/HT9L/xUzPf8QGx7/JCUp/2lrbf+9wMD/7+/v//v8/P/7+/v/+Pj4//v7+v/08/P/8/Py//b29f/x8fH/7u/v//Dx8f/u7u//4uHh/8/Qz/+rrKz/cXJz/z0+Qv8kJyn/IiYo/yktMv8qMTT/Ji4v/yguMv8mKzD/JCsw/yYtM/8kKzH/JC0y/yMrMf8jLTH/JS8z/yg0OP8oMzf/KzY8/ys2PP8tNz7/KzY8/yo1PP8tO0H/LTxD/y48RP8wP0X/M0JI/zZGTf85SVD/PE1T/z5QV/9CVV3/Rlpk/05ibf9JXmj/SWBr/0Zea/9AXWr/OFhl/y9UYv8nT1/nHDtKPgAAAAgAAAAEAAAAAwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGExgAMEltATN/pRcrcYluI2JxVxdGVQoHFx0DOH2XCEyhxVNMm8C4TJe13USOqNo8gJqhL2d7LQwaIAgdRFQdJlRleiVQYuMiSVf/HDxI/xQcIv8YGhz/Gx4e/zAxMv9nZ2n/oKOk/8jJyv/g397/6Onp/+Tl5f/l5eX/3d3e/9PT1P/Hycr/rK6u/4yNjv9kZmb/PD8+/yYoKf8fIiX/Jiot/ywyNf8rMTP/Ky80/yguMP8mMDD/Jy8y/yUsMv8jLDH/JCwx/yQrMv8kLjP/JS40/ycwNv8pMzn/LTc9/yw4PP8uO0H/LzxC/zE8RP8xPUT/LTg//y88Q/8yQkn/M0JJ/zNCSf84SE7/OUlQ/zpLU/89Tlf/RFdf/0RXYP9HWmX/TGNu/0lfav9KZHD/RGBr/z9ebP83WGj/LlZl/yhSYcIWMDwkAAAACQAAAAcAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOG0YAHZOdAQAAAABO6f8AAydIAgAABQEjRFoBM1x2BVCbvxZNnLgkRIqkJDp0hRITMTYFAg4QBAMMDwUZN0IMJlJkSCRSYsAgRlX9FR0j/xkaHP8fIiH/ICIm/x4hJP8kJyn/MTI0/0FBQ/9SVFX/WVpZ/1ZXWP9FRkf/OTo8/y8xMf8oKin/ICEi/yIjJv8mKSz/KS4x/yswNv8qMTX/KC8x/ygvMP8sMTP/Ji4y/ycvM/8mLzL/Ji40/yQtMf8iKy//Iywy/yUwNP8pNDr/KDQ6/yo1O/8xO0H/MT1C/zE/RP80QUb/M0FG/zZFSv8xPkT/MT1D/zZFS/85SE7/OEZO/zlIUP88S1P/O01T/z5QWf9GWmL/S15n/0hbZf9MY23/Tmdx/0hjbv9FZXL/Pl9s/zZZZ/8vV2b/KFJgjgoXHBEAAAALAAAABgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAECABZCYQD/AAAA/zu/AIQARgAAAAAAAAAAAAAAAAARCQ4AAAAAAf///wCd//8AAAURAQMaFwEAAAABAAAAAQgNEwMLISsFIkpbJiFBTqIVHyP9Ghsd/yAhIf8jJSf/Jiwr/yotL/8pLSz/Jysr/ygrLf8mKCj/Jigp/ycpLP8oKy7/KS4w/ykuL/8uMDP/LjE0/ywxNP8pLzL/KDAy/yowNP8pLjP/KC0x/ycuMf8pLzT/Ji0x/yQrMf8lLjT/Iy0y/yUvM/8lLjP/JzI3/yo1Of8tOD3/MDpA/zM+RP80QEX/NkNI/zdFSv84RUv/PElQ/zhESv8zQUb/OEdO/z1LUv85SVD/O0pR/z1NVP8+UVn/QVNb/0RWXv9MZG3/SmBp/0tkbf9MZHH/RWBt/0RjcP89X2z/Nlxr/y5XaPQjSVpdAAAADQAAAAgAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG5uAAC/vwAAgIAAAHV1AAAAAAAAAQEABQwKAChEVADO//8AWrncADx1jgAAAAAAAAAAABMAAAAAAAAAAAAAAQISEwIGDhAGDhIUXRIXFvYaHh7/ISQk/yUnJf8mKCr/KS0v/ywxL/8tMDD/LC4v/y0vL/8uMjP/Ki4x/ysvMf8rLzL/Ki8z/youMf8qLjH/KzEy/yYuL/8lLTD/KS4z/ygvNP8oLTL/Jy0w/ygvNP8nLTH/JCww/yUuMv8kLjP/JS80/ycwNf8pNTj/LTg8/zE7Qf8yPkT/NEFH/zhFTP86SU//PElQ/z1JUP8/TVT/PUtR/zZESv84Rk3/PU1W/ztMU/89TlT/PU5V/0JUXv9EWGD/RVph/0hgaf9MZnD/TGdv/0pkcP9IZnP/QWBt/zxfbf83XW7/LVdp1Bs7Si8AAAAMAAAABgAAAAUAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAQECBgQKCA1bEBAS9RobHP8hIyX/JScn/yYpKf8pKyz/Ki4s/ywxMf8rLTH/LC0v/ywyMf8qMTD/Ki0w/yotMf8rLjL/KCwu/yctMP8oLjL/KC4x/yYtMf8mLDD/Jy8y/yYuMv8kKy7/JSwx/ycvMf8kLjD/JC4y/yUvM/8nMTf/KTM3/yw3O/8uOT//MT9D/zRCRv83RUv/O0pR/z1MU/9DUFf/Q09X/0NRWf9ATlX/N0ZM/zlGT/87TFT/PE5X/zxOVv88T1b/QlVg/0hdZ/9EWmL/SmRs/05qc/9IY2z/R2Zx/0hodv9CZHL/OmFt/zRfb/8rVmecDB4nFgAAAQkAAAAJAAAABQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAQIAwoLD1wRERb1Ghse/yEiJv8jJyf/Jiss/youLf8sMC7/LTIy/yotL/8rLy//Ky8w/ysvMP8oLS//KS0w/ykvMf8pLjH/Jiwv/ycsL/8pLzP/JS8y/yQsL/8lLDD/Ji8z/yYvMv8lLTH/JS0y/yYvM/8lLjT/JjE3/yYyOP8pNDn/LTg+/y87QP8zQUT/N0VJ/ztLUf8/TVP/QVBW/0VVW/9GVl3/RFNa/0FRWf86TFP/NUNL/zpLU/88T1j/PFBZ/z1SWv9AVl//Rltm/0hga/9IYmz/S2Vv/0Zjbv9IZXP/Q2Nw/z9hb/86X3D/M11v9CdOXl0AAAAOAAABCAAAAAcAAAADAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEABBACCA0LXA4TFvUbGx7/ICMk/yQoKP8mLC3/LTEy/ywxM/8sMTL/LTAy/yovL/8oLC7/Jy0w/ygvMv8nKy3/Jywu/yctMf8mLTD/JS0u/ycuMf8mLzL/Ji4x/yYtMv8mLzT/JS8z/yQuMv8kLjL/JzA2/yYwNP8nMjj/JzM4/yo3PP8sOkD/MDxE/zNCSP86SE3/QE5V/0RSWP9EU1r/RVZd/0VXXv9FVl//QFNb/zlMVP8zQkn/NkZP/zlNVv8+VV7/QVdg/0FXYP9DXGf/SGJu/0dfav9HYm3/RWNw/0Rib/9BZHD/O19u/zZfcf8wW3DMHjlIKgAAAAwAAAAJAAAABAAAAAQAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAQAADwIHCwtdCxIT9hgcH/8fIyb/JSkp/yYsLP8rMTL/LTE0/yovMv8sMDX/KzE0/ycuMP8nLjD/KS8w/ycvMv8nLi//JS0w/yUtMP8mLjH/Jy8y/yYuMv8mLzL/Ji4z/yUuMv8kLjH/Iy4w/yUwNP8lLzX/JjE2/yYzOP8mNDn/Kzg+/y07QP81Qkn/OEZM/zxLUP9BUFf/RlZc/0dYX/9HV1//SVxj/0RYYP8/U1z/Ok9W/zNGTf8wQkn4OU1Y/TxRW/9CWWT/Qllk/0Vga/9IY23/RF9p/0Vibf9GYW//QmJu/z9ib/85Xm//NF9z/itWaogHEBUSAAABCwAAAAcAAAAGAAAABAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAABCAANAwkKC1wRERL1GR0f/yEmKP8lKiv/Jy0v/yowMv8tMzX/KjA1/yswNf8rMjX/KjEz/ykvMv8oLTH/Ji0w/yYsL/8mLDD/JSwx/yUtMv8kLTL/JCwx/yUuM/8kLTL/Iy4y/yMsMf8jLjL/IzE1/yUwNf8kMDX/JTI2/yg1O/8rOT7/LjxC/zVDSv87SlH/PU5U/0JTWv9EVl3/SVxl/0hbYf9GW2H/Qldf/z5UW/85UFn/MUdP9SY4QJQwSFHWN1FZ/zxXYf8/V2L/RF1n/0Nfaf9CXmn/QV9q/0BebP8/YW7/OFxr/zZeb/8xXHLkI0NUQgAAAA4AAAAKAAAABwAAAAYAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAIAAgUDCQwSXBAVGPUYISH/IScq/yYtK/8qMS//LDEz/ysyM/8rMTX/Ki8y/yQrLf8eJCb/Fxsd/xQXGf8SFRb/EhQW/xIUF/8TFxr/FRsc/xgfIv8eJCr/Iigv/yMsMf8jLDL/Iy0y/yQvNf8jLzT/JTE1/yQvNv8mMTj/Kjg+/yw7QP8wPkT/NUVM/zpLUv9BUln/Q1Rd/0VZYP9IXWX/R1lh/0VZYv9BV2H/PVZg/zROWfwpQUmgCRATNyg/SI42UFv/PVll/z9ZZf8/WmX/QV5q/0Bdaf8+XGj/P11r/zlZaf81WGr/MVts/y1XaaALGSAcAAAADQAAAAoAAAAFAAAABQAAAAIAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAABAAAAAgUHAQQNDRhdERcc9RsgI/8jKCr/JSwu/yswMf8sMTT/KC4v/x4jI/8SFBb/CgsM/wsMDf8PFBT/EhgY/xYdHP8XHx//Ehga/xAVFv8MDw//BwkJ/wcICf8MDhD/Ehgb/xojJ/8gKy//JDA2/yYyOP8lMjf/JTM4/yg1O/8rOT//Lj1F/zFAR/80Rkz/O01T/0FSWv9DVl7/RFhg/0hcZf9GW2P/Qlpj/0FYY/88VmH/LUpVvg8cIEUMFxs9LEhSpjdSXv47WGL/PVxm/z9daP88WWb/PFll/ztZZv84WGX/NFdm/zRZaf8vWWrtJEdVUwAAAA8AAQEMAAAACAAAAAUAAAAEAAAAAgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAACAwQDBAoSFV0RGB71GyAk/yIrK/8lLjH/KC4x/x4jJf8PExH/DRIS/yEtLv8/VVb/WHd5/2mPk/9znKL/fKis/4Ctsv92nqX/cJKa/2WAhf9Zb3L/QlBS/yQqK/8QEhP/BwkK/w0RE/8YICT/IS4z/yUxOf8oNj3/Kjg//y08Q/8uPkb/M0RM/zZIT/88Tlb/P1Nc/0BVXP9DWGD/Q1pj/0NcZv8/WmP/O1hj/zhTXsofMDhHBgsOOS1NVpc2V2H4NVNe/zhWYf89XWn/OVdk/zdTX/82VWL/NFVi/zNUZP8wU2P/LVZo/yhUZrMMHSQlAAAADwAAAAoAAAAIAAAABQAAAAYAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAIBAwEEChMVXRMZH/UZIib/ICkt/yIpLf8WGxz/EBYW/zJERP9jiYv/iLm//5XLz/+XztX/ksbR/4/Fzv+Nw8r/kMLM/5jH0f+cxs//ocfQ/6nM0/+ox83/oba7/4WTmP9ZX2L/JSgp/woMDf8NEBP/GyMp/yc0PP8sOkP/Kz1E/y5ASP8zREz/NkhP/zlNVf89U1z/P1Re/z5WX/9BWmP/P1xl/zxaZP8zVF/QIzg/VAABAyUhQEhxMldi8TZXZP82WGX/OFdk/ztZZv85VWT/MlBc/zNRX/8wUF7/LlFf/yxRYP8qU2XzHkRTYAAAABQAAAAOAAAACQAAAAYAAAAFAAAAAgAAAAIAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAACAAAAAQMCAAQPFBdcExsd9RokJv8dJSj/ERYX/yIwMf9ljI//lczR/57Z4P+a0t3/ksrS/4e/yP+CtsP/gbS//4Kyvv+JtcH/krvF/5rAy/+kxtD/rcnT/7LN1P+40db/wdbc/8DR2f+tub7/bnV4/yosLf8LDQ3/FRsf/yUzOv8rPUX/LkFI/zFFTP80R07/N01W/zhPWP87U1z/O1Zf/zpXYv84WGT/NVdiziA6QlIAAAAlGjI4PixVYNEwV2P/N1lm/zdaZ/82V2T/N1di/zVTX/8wUFz/Lk9b/ytMWv8pTFz/J05d/yRMXcQPISorAAAADwAAAA0AAAAIAAAABQAAAAQAAAADAAAAAgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAIAAAACBQMABA4VGVwRHR/1GB8j/xIYF/85UFL/ib3B/6Xh6P+j3eb/mtXe/43G0f+BucX/fLG+/3mtuP97q7b/fKu3/4CruP+IsLz/k7fB/529yP+nw87/q8bQ/7HL0/+50dn/v9bc/8fa3v/G1tr/rru+/2Vtbv8bHR7/DxMW/yMwN/8sQEf/LkNM/zNHUf80SlX/NE1X/zZTXP82VWH/M1Vi/zJUY8wgOURQAQMEGwQICiErT1yLMFto/Tlfa/9DZXD/PWBt/zdZaP8vT1v/L1Ba/yxMV/8qS1j/J0hW/yNHWf8iTV78GkBRfgAAABkAAAAOAAAADAAAAAkAAAAEAAAABAAAAAQAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAEEAQAEDhccXBEdIPUQGBr/Q1lb/5zR1/+r6e//ot/n/5vW4P+OytP/gbrG/3qxvv96rLv/eaq3/3motv9+qbf/g6y8/4qwvv+Ttr//mbrD/5+9x/+mw87/rMfQ/7TM1P+50tb/wNXZ/8nb4f/N3+T/zt3e/5ymqP86PT//DxMV/yEyN/8tQkz/MUhS/zNLVf8zTVn/MVBc/y5SYPssUV+1HjZBQAIEBRoAAAAXGjQ/OjBcbdc3YHD/RGt4/0RmdP89X27/Nlhn/y1OW/8pTFn/J0hW/yVHV/8hRFT/H0RX/x5IXeQPKzdEAAAAFQAAAA0AAAAKAAAABwAAAAQAAAADAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgIAAAQPFx1cDRkc9T5ZW/+k2+D/sfH3/6Xk7P+e2uP/lM7a/4fBzP9+tcH/fK+9/32tuv+Crrz/iK++/46zv/+RtMH/l7fE/5q5w/+evMX/n73H/6TByv+qxM7/rsnQ/7bN1P+909n/xNff/83e5f/W5uj/3evt/73Hyv9SWFn/Exga/yI1Pf8uR1H/L0tW/y5LWf8qS1nqJ0pVhBkvNicAAQIVAQECEwAAABEpVWNtMWFx+UFpe/9Ibn7/RWp5/zhfbv8uU2L/LVBe/ydKWf8kR1f/IERV/x9DVf8dQ1j/GkNYuQcVHSUAAAASAAAADQAAAAgAAAAHAAAABAAAAAMAAAACAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAADFRUTAw0WGV4wRUb2n9TV/7z5/f+u7fT/od7n/5jS3v+Qx9P/hrzI/4Czv/+Drbr/eJqn/26Mmv9yipj/fpik/5CrtP+fuMT/pcDJ/6XByv+mw8v/pcDK/6jEzv+uyND/tczT/73V2f/F2d//zt/l/9jn7v/h7/T/4vH0/9Hc3v9fZGX/FBse/yQ7RP8rSFT/K0tZ/ydHV78UKTQkAAAADgAAABEAAAAPBAkKFTBhcJc1Znf/RW1//0lxgv89ZXb/M1xs/ytSYf8pTl3/Jkpb/ypNXv8jR1n/HUNV/xtFWf8VPlKPAAAAFwAAAA4AAAANAAAABwAAAAQAAAAEAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQMAAAIRGh0LITI0jYSwsf/D/v7/t/b7/6jl8P+e2OX/lc3c/47D0f+Iucn/fqi2/2F/jv9eeov/a4aU/26Jlf9wipb/bYaS/3OJlf+Fnqn/nre+/6rCy/+qxM7/rMfO/7PM0v+50tj/x9vf/9Di5v/b6O3/5O71/+n1+f/u+Pr/8/z8/9vk5f9gZGX/GCMn/ydET/8oSVj/J0hYvBctOh4AAAAJAAAADgAAAAwOIigXMGZ2pTZqe/9EcYT/RHGD/zZjd/8wW2//LFZo/yZQYv8mTGD/K1Jj/yVMXv8aRVj/GUda+hU7T3MAAAAUAAAACwAAAAoAAAAFAAAAAwAAAAMAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//wAAAAABGCknAhEZGy5aeXrawfPz/7/8/f+y8fr/o+Hu/5zV4/+Xytr/kMDQ/4Wzwv9yk6T/iKaz/528x/+fucT/n7rB/6LBx/+lwcv/nLa9/42krf+CmqP/j6Sw/6e+xv+zytH/vtPa/8vc5P/W5On/4O3u/+fz9v/s+Pv/8vz+//f+/v/7/v7//f///9ve3/9JTk7/HC83/ylKWf8mS1y8FjE+HQAAAAkAAAAKAAAACQkTGhIyaXyYN26E/zhtgP84a3//NGR5/y1dcv8pV2v/JFFk/yZSZf8pVWf/JFBj/xpHXP8YSF70EjhNYgAAABAAAAAJAAAACAAAAAUAAAACAAAAAgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEXKCkFLkRGcZnExPzM////uvr9/6/t+P+k3uv/ntLf/5rK2f+VwdD/j7XE/569yf+gt8H/c4KH/1ReYf9SWl7/Ym9y/4qZnv+xxMj/uMrS/7HFzP+fsrz/oLG8/8HS2v/Q3+T/2+jq/+Lr8P/s8/X/8Pf5//P8/P/5/v///f7///7+/v/9/f3//////73Cwf8qNjj/I0VT/yZOYLoWNkIdAAAACAAAAAYAAAAIAAAACy5md0w6dYzdN2+H+jRpguIxZX3iLGB4/ypbc/8rWHD/JVVr/ydWbP8jUmv/GEhg/xhJZfMTPVZcAAAADgAAAAgAAAAFAAAABAAAAAMAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACRYSAQ4bHxNliYmzxPLz/8f///+5+f3/r+v2/6fd6v+i09//ncnZ/6HI1/+y0dv/nra9/1VeYf8wMjP/KSsr/ykqKv8qKir/NDY2/2Npav+tur//yNbb/8rX3P/H1Nz/zNvg/9zo6f/m8PH/6vP0//H3+f/3+vv/+/7+//7//////////v7+//39/f/9/f3/+vv7/4OHif8iO0X/JlJkuRxCTxkAAAAGAAAABQAAAAUAAQEGDR8pDjJme0A0aoBmJlFkSCxlfaorZ3//LWN9/ytdd/8mV3D/JlZu/yFSbv8XTGj/GVFy/BdMa2sAAAAKAAAABwAAAAMAAAADAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQwMAAAAAABmgZ0AMlNULZW5ueDW////xv7+/7r2/f+x6PP/qt3p/6TR3v+hy9j/tdTg/7TL0/9ga27/LzEx/yotLP8qKyn/KCkp/ycoJ/8nJyb/KSkq/2JjZf/Kz9L/4OXp/93l6v/U3+X/0t7g/+Tq7f/y9ff/9/v9//v9/v/+//////////7+/v/+/v7//v7+//39/f//////3N7e/0BQWP8kTWCsHEJQEgAAAAQAAAADAAAABAAAAAMAAAAGAAAABQAAAAcHFR0VKmmDpStqhP8uZoL/LGR9/yRacv8iWHH/HVNx/hlQcecZUXGfEzlVLAAAAAcAAAAEAAAAAgAAAAEAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABdl5cA////AGT//wFbe3tWw+fn9Nb////G/f7/vfb9/7Pn8v+v3ev/p9Lh/6rR3v/C3Ob/lKOp/zo8Pf8tLjD/LjAx/zM0Nf8zMzT/LzAv/ykpKP8oJyf/Njc2/6uvr//p7O7/0Njd/4WTnf9WaHP/a3yE/6u0vP/q7vD///////////////////////7+/v/+/v7//f39//39/f/9/f3/gIuO/yJHVqIeQ04OAAAAAgAAAAIAAAAFAAAAAwAAAAUAAAAFAAAABQYMEg8tbYmbK2yL/y1pg/8oZX//IVp5/xpTdP8YU3b2FUVmcAQNFRYAAAAIAAECBAAAAAMAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHW4uAAAUkwAVMfOAo+4t3nV8/P/1////8v9/v/D9P3/uOf0/7Hd6/+p1eL/sNbg/8bf5/+Ekpf/QkVG/1tfYP+Fio7/m6Gl/56lpv+Vm5v/hYeG/3V2df9+f4D/x8rJ/9jd3/9kdH7/GC07/xAnM/8TKjf/IzpH/2d4g//S2dv////////////////////////////+/v7//v7+///////Dycr/PFRemBtDUAgAAAACAAAAAgAAAAQAAAADAAAAAwAAAAUAAAAFAAAACStui4UscI3/K22J/yhohv8gW3//G1d7/xtdg/UYT3JdAAAABQAAAAQAAAACAAAAAgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAn+XlAAAAAAA9ZGQGv+fokuP9/v/d////0f7//8f2/f+/6/X/vOLv/7re6f+42eT/zeTr/7/N0/+yvsH/zdnc/93o6//j6u7/5uru/+ft7v/n6+7/4+fo/+Xn6//h5eT/e4eN/xgqNv8OJC7/DiQw/xAmM/8SKTf/Fi8//0VdaP/K0tb//////////////////////////////////////+jq6/91goWLEy86AwAAAAIAAAADAAAAAwAAAAQAAAAEAAAAAwAAAAUAAAAGJ22NYSx2lfgobI7/JWeN/x9hh/8aXIT/G2GN9RlZgVoAAAADAAAAAgAAAAIAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADP8/MA////AIe1tQzd7++i8P///+X////Y/v//0fr//8vu9f+cv8r/fJ6s/3ybqf+etr//ztzi/+Lu8v/l8fT/5e3x/+jv8//q7vH/6+7y/+7x8//u8fT/5ejp/5Gbnv8hMjv/DyAr/w4iK/8OIy7/DyYx/xAoM/8RKzf/FDE+/1tyfP/s8PH/////////////////////////////////9vj4/8rV1olfgoMCAAAAAQAAAAEAAAACAAAAAgAAAAIAAAADAAAABAAAAAYgW3YqK3qe0CZ1mf8jbZX/HmeN/xtlkP8caZrgGFJ6MwAAAAIAAAACAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPP+/wAA//8A2P//EvD//7L2////7P///9/////R8fb/b5am/ytUaf8dRVj/HEFU/yZFV/9LZHP/mqu0/97o6//r8/P/7vTz/+7z9P/u8/L/7fHw/9LX1/99hon/MD5F/zxKUv9TXGT/WGVt/zxOV/8YLjj/ECYy/xEpNf8RLTn/KkVQ/8PO0P/////////////////////////////////+/////P39iOH4+AIABAQAAAAAAAAAAAAAAAABAAAAAAAAAAEAAAADAAACAwEKDQglcJVNJnejsyN2o9Agc6DcHXKkyxpklGMHFioJAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AOv//wD8//8V/v//uf3////y////5////5CyvP8kTmD/GT5R/xg7S/8YOEf/GDZF/xk1Q/8jPUr/d4qR/9zj6P/u9fb/8PP0/+fr6v+fpan/QEtS/xclLf9td3v/f4OE/1BRUv+MjY//zdPU/1dncP8OJjD/ECg0/xIsOf8oRFD/ws3Q//////////////////////////////////////////+G////AW1sbAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAMAAAACAAAABQAAAAUTQl4VGFRxIRlWfyQYWYAcBxMbBwAAAAIBBAUBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8A////AP///xX///+5//////n////Z7PD/RWt5/xk8Tf8WN0f/FTRC/yZBTP97jJX/lqOq/0tdaP8fNUD/gY2U/+zv8v/w8vL/l5yf/zxHTP87RUz/P0lP/2ducv9PU1X/MDIz/01QUv+SnJ//PU5X/w4kMP8PJzH/FzA7/2F2fv/t8fL//////////////////////////////////////v///3b///8B////AKqqqgAAAAAAAAAAAAAAAAAAAAABAAAAAgAAAAIAAAACAAAAAgAAAAMAAAADAAAAAgAAAAEAAAACAAIDAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wD///8A////Ff///7n//////f///7DIz/8jSVf/FTNE/xMwP/8SLDr/ZnmA//T19//S1NT/jJKU/zhIT/8xQUn/xcrP/9ba3f+Tm6D/xcjJ/9/g4f/f4eH/1NbW/7G3t/+NkpX/aHF2/0dWXf8vQUn/Kj1I/z1QWf9+jZT/3uPl///////////////////////////////////////////7////bP///wH///8A////AAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAIAAAABAAAAAQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AP///wD///8T////tP//////////o7rB/x49Sv8RLTn/ECk1/xQqNf+YpKj/6erp/2BjY/8+QD//QUtN/y08Q/+ttbn/0tjb/8bL0f/2+Pn/+/v8//z8/P/8/f3//f78//n6+f/v8fL/5enp/9nd3v/P1df/5urr//v8/P////////////////////////////////////////////////P///9T////AP///wD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8A////AP///wr///+e///////////E09j/KENO/w8mMf8OIyz/ECIq/4KNkv/k5+b/ZGlo/z9CQ/9NVVf/SFRY/+Ll5P/4+fn/0dfa//b4+P/+//3////+//7//////v7/////////////////////////////////////////////////////////////////////////////////////4f///y3///8A////AP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wD///8A////Av///3////////////b5+f97i5P/Fyw1/wodIv8JGiD/JzY8/3mEh/9tdnj/RU5R/zY/RP+Ij5P/+/z7///////m6ez/8vX2//////////////////////////////////////////////////////////////////////////////////////////////////////////+y////Ev///wD///8A////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AP///wD///8A////Uf////P///////////Dz8/+Mmp//NkdL/xgnK/8MGRz/ChUa/xIcIf8fKSz/ZGtt/+Xn6P////////////r7/P/z9vj/////////////////////////////////////////////////////////////////////////////////////////////////////+P///2T///8C////AP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8A////AP///wD///8l////2v////////////////3+/v/i5uf/s7u9/5KXmf+LjpH/jZGT/7O4uv/w8fL///////////////////////7+/v////////////////////////////////////////////////////////////////////////////////////////////////////++////G////wD///8A////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wD///8A////AP///w7///+m////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////6v///07///8C////AP///wD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wD///8A////Af///03////t//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////X///92////Cf///wH///8A////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AP///wD///8B////DP///4n////8///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////v////ff///xD///8B////AP///wD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8A////AP///wD///8B////Hv///7T/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////2P///2L///8N////Af///wD///8A////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8A////AP///wD///8C////M////8f/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////9vv7/9rn6tLc5utE////BvL18gH///8A////AP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8A////AP///wD///8D////Nf///7j////+////////////////////////////////////////////////////////////////////////////////////////////////////////////////9vz9/8bf6f9xoLD/MV5w8Rg6TY0YMUEWDCpXAf//AAAAAFsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wD///8A////AP///wD///8C////If///5D////r///////////////////////////////////////////////////////////////////////////////////////////////5////1/P7/aZ6utPjOYGf/yBbdf8ZR1n/EjI/+gwjLn4HGSAIAAAnAAIQKwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wD///8A////AP///wD///8B////DP///0r///+s////7P////7///////////////////////////////////////////////////////////////T////W////n////2P///8npNnvFiZ6p6EeZYj/G1Jq/xVAU/8PLjv/CyAo2AgWHCALKkQACRcwD///8A////AP///wD///8A////Af///xL7/v5G0OPrr9fl7Pzq7e//9fn6/v////v////8/////P////j////w////3f///7P///+D////Uv///yP///8L////Af///wBfzegBHWmYPRtgg9MZUGf/EjxP/wwtN/8HHSTaBBQZIAYhOAAGFhgCh5t4AOpq3BR5fhFQeT3DVLVBk/zlTYP9fdn7y0djZhf///3D///9w////Yv///0j///8o////Ev///wT///8A////AP///wD///8AvbLKAANojQASV4MEF1d5ORVKY5sSOEzKDSs4sAkhJ1YEGhonJYAAgS6AHD/5AAXZp0zFVR+1hI+V/8NLz3/CyQv/wgZIc0WKC8e////Af///wH///8B////AP///wD///8A////AP///wD///8A////AP///wDh//QAGF+hABlJggAMNkcBEj1XDBM4SxoSLj8RDjVAAgIpMAEAAAoqQAMaO4AI4zLBhhutIoTUX//DjZO/wwmN/8JHyj7BxkidgsZIgaCt8YA////AP///wD///8A////AP///wD///8A////AP///wD///8AAAAAACFrawAGolgAMzeEAA+LPgApAIkAIC5SAEEuAAAAPf8ABQQeni6AAOB3wAgjdcHF2u8kxBNg/8MMk7/CiU2/wgeKKoHHSYZAA8wAf///wDFw8gA////AP///wD///8A////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB0dAAAhYUAE2BfABJLVgAPO0kADC5QAAUuRwAAjmQAAFhseZIABnH/AC6X7QEWZ7EuEE+BkQ03Uq8KJzl8CR8vHwUiNwIAJxgAAhkhAAAAGgngAqaJgANF6JAB5/ngESVH0ID0FZEBFCVgULUWUBABUnABr//wurQArbaQAClzVADQAAAAUAAAAAAAAAAQAAAAEJjUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABpyoAAfepsAEWWOABBZbwATUVYAClVTABBUVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA///////////////8AAA/////////////////wAAAH///////////////+AAAAA///////////////gAAAAAP/////////////+AAAAAAD/////////////wAAAAAAA////////////+AAAAAAAAP///////////wAAAAAAAAD////////AAAAAAAAAAAAA///////4AAAAAAAAAAAAAP//////AAAAAAAAAAAAAAH/////+AAAAAAAAAAAAAAB/////8AAAAAAAAAAAAAAA/////+AAAAAAAAAAAAAAAP/////AAAAAAAAAAAAAAAH/////gAAAAAAAAAAAAAAB/////AAAAAAAAAAAAAAAA/////gAAAAAAAAAAAAAAAP////gAAAAAAAAAAAAAAAB///8AAAAAAAAAAAAAAAAAf//wAAAAAAAAAAAAAAAAAH//gAAAAAAAAAAAAAAAAAB//wAAAAAAAAAAAAAAAAAAf/8AAAAAAAAAAAAAAAAAAH//AAAAAAAAAAAAAAAAAAD//wAAAAAAAAAAAAAAAAAB//8AAAAAAAAAAAAAAAAAA///AAAAAAAAAAAAAAAAAAP//wAAAAAAAAAAAAAAAAAH//8AAAAAAAAAAAAAAAAAD///AAAAAAAAAAAAAAAAAB///wAAAAAAAAAAAAAAAAA///8AAAAAAAAAAAAAAAAAP///AAAAAAAAAAAAAAAAAH///wAAAAAAAAAAAAAAAAH///8AAAAAAAAAAAAAAAAB////AAAAAAAAAAAAAAAAA////wAAAAAAAAAAAAAAAA////8AAAAAAAAAAAAAAAAP////AAAAAAAAAAAAAAAAD////4AAAAAAAAAAAAAAA//////AAf8AAAAAAAAAAAf/////8B//AAAAAAAAAAAH/////////gAAAAAAAAAAD/////////4AAAAAAAAAAA/////////+AAAAAAAAAAAf/////////gAAAAAAAAAAH/////////4AAAAAAAAAAA/////////+AAAAAAAAAAAP/////////AAAAAAAAAAAB/////////wAAAAAAAAAAAf////////8AAAAAAAAAAAH/////////AAAAAAAAAAAAf////////wAAAAAAAAAAAH////////8AAAAAAAAAAAA/////////AAAAAAAAAAAAP////////wAAAAAAAAAAAB////////8AAAAAAAAAAAAf///////AAAAAAAAAAAAAH///////wAAAAAAAAAAAAA///////4AAAAAAAAAAAAAP//////+AAAAAAAAAAAAAD//////+AAAAAAAAAAAAAA///////gAAAAAAAAAAAAAP//////wAAAAAAAAAAAAAD//////8AAAAAAAAAAAAAA///////AAAAAAAAAAAAAAP//////wAAAAAAAAAAAAAD//////wAAAAAAAAAAAAAAf/////8AAAAAAAAAAAAAAH//////AAAAAAAAAAAAAAB//////wAAAAAAAAAAAAAAf/////8AAAAAAAAAAAAAAH//////AAAAAAAAAAAAAAB//////wAAAAAAAAAAAAAAf/////8AAAAAAAAAAAAAAH//////AAAAAAAAAAAAAAB//////wAAAAAAAAAAAAAAf/////8AAAAAAAAAAAAAAH///////AAAAAAAAAAAAAB////////+AAAAAAAAAAAAf////////gAAAAAAAAAAAH////////8AAAAAAAAAAAB////////+AAAAAAAAAAAAf////////gAAAAAAAAAAAH////////wAAAAAAAAAAAB////////8AAAAAAAAAAAAf////////AAAAAAAAAAAAP////////wAAAAAAAAAAAD////////+AAAAAAAAAAAA/////////gAAAAAAAAAAAP////////4AAAAAAAAAAAD/////////AAAAAAAAAAAA/////////wAAAAAAAAAAAP////////8AAAAAAAAAAAP/////////AAAAAAAAAAAD/////////wAAAAAAAAAAA/////////8AAAAAAAAAAAf/////////AAAAAAAAAAAP/////////wAAAAAAAAAAH/////////8AAAAAAAAAAB//////////AAAAAAAAAAA//////////wAAAAAAAAAA//////////8AAAAAAAAAAf//////////AAAAAAAAAAP//////////wAAAAAABAAH//////////8AAAAAAAQAD///////////AAAAAAAGAA///////////wAAAAAAB8P///////////8AAAAAAA//////////////AAAAAAAP/////////////wAAAAAAD/////////////+AAAAAAB//////////////gAAAAAAf/////////////4AAAAAAP//////////////AAAAAAH//////////////4AAAAAD//////////////+AAAAAA///////////////wAAAAAP//////////////+AAAAAD///////////////4AAAAA////////////////AAAAAP///////////////wAACAD///////////////8AAPwB////////////////AA///////////////////wAf//////////////////+AH///////////////////wH/////////////8=''"))
        tmp.close()

        self.tk = Tk()
        self.tk.title('发送房租软件')
        self.tk.iconbitmap('./tmp.ico')
        os.remove("tmp.ico")  # 删除icon文件
        self.tk.geometry('665x600')
        self.tk.resizable(width=False, height=True)  # 宽不可变, 高可变,默认为True

        self.create_yearframe()     #创建年份 构件
        self.create_monthframe()    #创建月份构件
        self.create_stateframe()    #创建text构件，包含发送特殊内容按钮
        self.create_buttonframe()   #创建 获取房租信息、登录微信 按钮
        self.orm = OrderedDict()    #获取房租信息后，存放tree每一行、多选按钮、与租客的对应dict {item:按钮、住户房号、租客名、image}

        self.create_heading()       #tree重设的头
        self.create_tv()            #创建tree与多选按钮 构件
        mainloop()


# =============================最开始选择年月部分========================###
    def create_yearframe(self):
        '''创建年份的构件，放入单选按钮'''
        import tkinter
        yearframe=tkinter.LabelFrame(self.tk,height=50, width=400, text='年份',)
        yearframe.pack(fill=X)

        self.year = StringVar()
        year=datetime.datetime.now().strftime('%Y')
        self.year.set(year)

        Style().configure('TRadiobutton', font='宋体', )
        for i in range(2020,2025):
            month=Radiobutton(yearframe,variable=self.year, text='%s年'%i, value='%s'%i)
            month.grid(column=i, row=1, sticky=W, padx=10)

    def create_monthframe(self):
        '''创建月份的构件，放入单选按钮，只有选择月份时，才有调用回调函数，显示所选时间'''
        import tkinter
        monthframe=tkinter.LabelFrame(self.tk,height=50, width=400, text='月份')
        monthframe.pack(fill=X)

        self.month = StringVar()
        month=datetime.datetime.now().strftime('%m')
        self.month.set('%s月'%int(month))
        def select_month():
            self.the_month = '%s-%s' % (self.year.get(), self.month.get())  # 获取tk上选择的时间
            self.text_insert("选择时间为： %s" % self.the_month)

        for i in range(1,7):
            month=Radiobutton(monthframe,variable=self.month, text='%s月'%i, value='%s月'%i,command=select_month)
            month.grid(column=i, row=1, sticky=W, padx=20)

        for i in range(7, 13):
            month=Radiobutton(monthframe,variable=self.month, text='%s月' % i, value='%s月' % i,command=select_month )
            month.grid(column=i-6, row=2, sticky=W,padx=20)
# =============================最开始选择年月部分========================###




# ==================================text等的中间部分========================###
    def create_stateframe(self):
        '''
         此构件分2个部分：
            一：text部分，每次按动按钮，其操作会显示在text上；
            二：微信发送部分，分为：1.选择发送昵称(微信上备注)---房间名  ---租户名
                                 2.发送特定内容
                                '''
        #整个构件
        stateframe=Frame(self.tk)
        stateframe.pack(fill=BOTH)

        #======text、滚动条 构件创建====
        textframe=Frame(stateframe)
        textframe.pack(fill=BOTH,side=LEFT)

        self.state_text = Text(textframe, width=60,height=7, )
        bar = Scrollbar(textframe)
        # 两个绑定
        bar.config(command=self.state_text.yview)
        self.state_text.config(yscrollcommand=bar.set, )
        # 固定位置
        bar.pack(side=LEFT, fill=Y)
        self.state_text.pack(side=LEFT, fill=X, expand=1)

        #设定各种text字体格式
        #分别有初始、常规、警告、报错
        self.state_text.tag_config('start', font=('system', 12, 'bold'),background='DarkGray', foreground='Chartreuse')
        self.state_text.tag_config('default',font=('system',12))
        self.state_text.tag_config('warning',foreground='blue', font=('system',12,'bold'))
        self.state_text.tag_config('error',foreground='red', font=('Fixdsys',12),underline=True,background='Wheat')
        self.text_insert("欢迎使用微信发送房租软件，请先选择月份",'start')


        #======发送构件===================================
        wxframe = Frame(stateframe)
        wxframe.pack(fill=BOTH,side=LEFT,padx=10,)

        #发送昵称 构件
        name_frame=LabelFrame(wxframe,text='微信昵称')
        name_frame.pack(fill=BOTH,padx=10, )

        self.send_name = StringVar()
        self.send_name.set('房间名')
        Style().configure('W.TRadiobutton', font='宋体 11', )
        Radiobutton(name_frame, variable=self.send_name, text='房间名', value='房间名', command=self.set_sendname,style='W.TRadiobutton').pack(side=LEFT)
        Radiobutton(name_frame, variable=self.send_name, text='租客名', value='租客名',command=self.set_sendname,style='W.TRadiobutton' ).pack(side=LEFT)


        # 微信发送特定内容 构件
        sendframe = LabelFrame(wxframe, text='发送信息')
        sendframe.pack(fill=BOTH, padx=10, )

        self.word_var=StringVar()
        send_word=Entry(sendframe, textvariable=self.word_var)
        send_word.pack()
        self.word_button=Button(sendframe,text='登录微信',command=lambda :self.log_wx())
        self.word_button.pack()


    def text_insert(self,text,tags='default'):
        '''在text中 根据不同的样式 插入各种信息'''
        self.state_text['state']=NORMAL
        self.state_text.insert("end", '\n·')
        self.state_text.insert("end",text,tags)
        self.state_text.yview_moveto(1)
        self.state_text['state'] = DISABLED #让text栏不可修改

    def set_sendname(self):
        '''选择微信昵称的回调函数'''
        send_name=self.send_name.get()
        self.text_insert("选择微信昵称为： %s" % send_name)
#==================================text等的中间部分========================###



# ==================================按钮部分，各种回调函数========================###
    def create_buttonframe(self):
        '''全选、获取房租信息、登录微信那一栏'''
        the_frame=Frame(self.tk)
        the_frame.pack(fill=X)
        Label(the_frame,text='全选').pack(side=LEFT)
        self.get_info_button=Button(the_frame,text='获取房租信息',width=25,command=self.open_excel)
        self.log_wx_button = Button(the_frame,text='登录微信',width=25,command=lambda :self.log_wx())

        self.get_info_button.pack(side=LEFT)
        self.log_wx_button.pack(side=LEFT,padx=20)


    def open_excel(self):
        '''回调函数，====获取房租信息
           清除tree里的内容
           根据所选月份，调用Open_Excel，获取所有房租信息，生成截图；
           调用insert_tv将该月份的租金详情插入tree
           弹出新的窗口，显示用水电情况'''
        self.clear_tv()                     #删除tree
        self.the_month = '%s-%s' % (self.year.get(), self.month.get())  # 获取tk上选择的时间
        self.get_info_button['state'] = 'disabled'  #按了后不能再按
        self.text_insert("获取<= %s =>的房租信息"%self.the_month)
        self.tk.update()
        try:
            # 根据所选月份，实例化打开所有excel的类
            open_excel=Open_Excel(self.the_month)
            # 获取所有住户 该月份的租金信息，截图;每个房子的用电水情况
            send_info_dict,fangzi_shuidian=open_excel.get_send_info()
            self.insert_tv(send_info_dict)          #将住户的租金信息 插入到tree
            self.show_shuidian(fangzi_shuidian)     #弹出新的窗口，显示用水电情况

        except Exception as e:
            self.text_insert("获取<= %s =>的房租信息失败，请再按一次！！！"%self.the_month, 'error')
            logging.error("ERROR：%s\n"
                      "%s" % (e, traceback.format_exc()))
            print("ERROR：%s\n"
                  "%s" % (e, traceback.format_exc()))
        finally:
            self.get_info_button['state'] = 'normal'    #无论成功与否，变为可按状态


    def log_wx(self,cache_path=True):
        '''回调函数，
           登录微信，登录成功，改变2个按钮状态，重设回调函数'''
        try:
            self.bot = Bot(cache_path=cache_path)   #wxpy的启动函数
            time.sleep(0.7)
            self.bot.file_helper.send('登录发送房租软件')
        except Exception as e:
            self.text_insert("登录微信失败，请重新登录！！" , 'error')
            logging.error("ERROR：%s\n"
                          "%s" % (e, traceback.format_exc()))
            print("ERROR：%s\n"
                          "%s" % (e, traceback.format_exc()))

            self.log_wx_button['command'] = lambda: self.log_wx(False)  # 登录微信不用缓存
            self.word_button['command'] = lambda: self.log_wx(False)  # 登录微信不用缓存
        else:
            self.text_insert("登录微信 %s 成功" % self.bot.self)
            #成功登录微信后，改变按钮状态
            self.log_wx_button['text']='发送房租'
            self.log_wx_button['command']=lambda :self.wx_send(self.send_fangzu) #此时按钮变为发送房租

            self.word_button['text'] = '发送信息'
            self.word_button['command'] = lambda: self.wx_send(self.send_words)  # 此时按钮变为发送特定信息



    def wx_send(self,send_func):
        '''回调函数，登录微信后，根据不同按钮，发送房租/特定信息
           步骤：1.判断是否获取了住户详情：没有，那就按下【获取房租信息】，中断
                2.判断所选月份下，获取的住户能否被选中：都不能选中，text插入警告，中断
                3.判断此时微信是否在线：---在线，给自己发送信息；text插入信息
                                     ---掉线，text插入报错，并log
                                         改变按钮状态，然后中断
                4.循环self.orm(存放每个住户信息的dict)
                  发送条件：---此住户被选中(多选按钮打勾)
                           ---微信有此住户
                  根据send_func  发送房租信息/特定信息
                5.text插入发送情况

        '''
        #还没有获取住户详情，那么就按下【获取房租信息】
        if len(self.tv.get_children())==0:
            print('还没获取房租信息')
            self.open_excel()
            return

        #此时所有住户都没有房租详情(不能选择发送)
        if len(self.orm)==0:
            self.text_insert("<= %s =>所有住户都没有房租信息，请重选"%self.the_month, 'warning')
            return

        #测试微信是否还在线，若不在，更改按键信息，报错，中断发送

        #根据按钮的不同(发送房租/单条信息),设定发送给自己的语句
        if send_func==self.send_words:
            log_word='发送特定信息：%s'%self.word_var.get()
        else:
            log_word = '发送<= %s =>房租信息' % self.the_month

        try:
            self.bot.file_helper.send(log_word) #给信息助手发送信息
            self.text_insert(">>>>>>%s" % log_word)
        except Exception as e:
            self.text_insert("微信登录失败，请重新登录！！！" , 'error')
            logging.error("ERROR：%s\n"
                          "%s" % (e, traceback.format_exc()))

            self.log_wx_button['text'] = '登录微信'
            self.word_button['text'] = '登录微信'
            self.log_wx_button['command'] = lambda :self.log_wx(False) #登录微信不用缓存
            self.word_button['command'] = lambda: self.log_wx(False)  # 登录微信不用缓存
            return

        # 循环orm里每个住户的信息，若此住户被选中，而且在微信好友中，那么发送信息send_info:[总房租、截图]
        send_nums=0             #每次发送用户的数量
        wx_friends=self.bot.friends()                       #微信的好友列表
        #item:tree的行，button:多选按钮，zuhu：房子名-房号，name：租客名，image：房租截图
        for item,[button,zuhu,name,image] in self.orm.items():
            if self.send_name.get()=='租客名':zuhu=name#此时微信备注的是租户名
            friends = wx_friends.search(zuhu)              #根据该住户获取微信好友(列表)
            button_value = button.getvar(button['variable']) #获取对应按钮状态
            #当前住户是被选中(打勾)
            if button_value == '1':
                button.invoke()             #按钮变为不选中
                #微信添加了该租户
                if len(friends) > 0:
                    send_nums += 1
                    send_func(friends, item, name, image)
                    print()
                else:
                    zhuangtai = '没有添加此住户的微信'
                    self.tv.set(item, column='发送详情', value=zhuangtai)

        #每次发送后，text插入发送情况
        if send_nums==0:
            self.text_insert("一个租户的房租信息都没发送出去？!!!" , 'warning')
        else:
            self.text_insert("→→→→→→成功发送了  %s 个住户\n"%send_nums)


    def send_fangzu(self,friends,item,name,image):
        '''给各个住户 发送【房租信息】'''

        # 微信添加了该住户(备注好了)
        the_zuhu = friends[0]  # 住户的微信号

        print('发送%s的房租信息' % name)
        fangzu = self.tv.set(item, column='房租')  # 获取房租金额
        the_zuhu.send('%s，您%s的房租是：%s元' % (name,self.month.get(),fangzu)) #原来不会返回结果ret。。wxpy会直接print！
        time.sleep(0.5)
        the_zuhu.send_image(image)  # 发送截图
        time.sleep(0.5)
        zhuangtai = '房租发送成功'
        if len(friends) > 1: zhuangtai = '房租发送成功(微信号不止1个)'
        self.tv.set(item, column='发送详情', value=zhuangtai)  # tree上更新发送详情



    def send_words(self,friends,item,name,image):
        '''给各个住户 发送【指定信息】'''
        the_zuhu = friends[0]  # 住户的微信号

        print('给%s发送了一条信息' % name)
        words=self.word_var.get()
        the_zuhu.send(words)
        zhuangtai = '特定内容发送成功'
        if len(friends) > 1: zhuangtai = '特定内容发送成功(微信号不止1个)'
        self.tv.set(item, column='发送详情', value=zhuangtai)  # tree上更新发送详情

# ==================================按钮部分，各种回调函数========================###


# ==================================tree部分，构建========================###
    def create_heading(self,):
        '''重新做一个treeview的头，不然滚动滚动条，看不到原先的头！！！'''
        heading_frame=Frame(self.tk)
        heading_frame.pack(fill=X)

        #填充用label   (不然全选按钮会靠边)
        button_frame=Label(heading_frame,width=0.5)
        button_frame.pack(side=LEFT,)
        #全选按钮
        self.all_buttonvar = IntVar()
        self.all_button = Checkbutton(heading_frame, text='',variable=self.all_buttonvar, command=self.select_all)
        self.all_button.pack(side=LEFT)
        self.all_buttonvar.set(0)

        self.columns = ['日期', '楼房', '房号', '租客','房租', '发送详情']

        #用按钮作为 tree的头
        Style().configure('w.TButton', font='system',foreground='Gray')
        widths=[11, 9, 9, 9,9, 23]
        for i in range(len(self.columns)):
            Button(heading_frame,text=self.columns[i],width=widths[i]
                  ,style='w.TButton',).pack(side=LEFT)


    def create_tv(self):
        '''创建tree与多选按钮的构件
           结构：canvas_frame：---ysb(滚动条)
                              ---self.canvas：-self.tv_frame：---self.tv
                                                              ---self.button_frame：Checkbutton'''
        #放置 canvas、滚动条的frame
        canvas_frame=Frame(self.tk,width=600,height=400)
        canvas_frame.pack(fill=X)

        #只剩Canvas可以放置treeview和按钮，并且跟滚动条配合
        self.canvas=Canvas(canvas_frame,width=620,height=500,scrollregion=(0,0,620,400))
        self.canvas.pack(side=LEFT,fill=BOTH,expand=1)
        #滚动条
        ysb = Scrollbar(canvas_frame, orient=VERTICAL, command=self.canvas.yview)
        self.canvas.configure(yscrollcommand=ysb.set)
        ysb.pack(side=RIGHT, fill=Y)
        #!!!!=======重点：鼠标滚轮滚动时，改变的页面是canvas整个画面(包括多选按钮) 而不是单独treeview
        self.bind_mouse(canvas_frame)


        #想要滚动条起效，得在canvas创建一个windows(frame)！！
        tv_frame=Frame(self.canvas)     #注：这个是放置容器，下面带self是设定高度尺寸等
        self.tv_frame=self.canvas.create_window(0, 0, window=tv_frame, anchor='nw',width=650,height=400)#anchor该窗口在canvas左上方

        #放置button的frame
        self.button_frame=Frame(tv_frame)
        self.button_frame.pack(side=LEFT, fill=Y)
        #Label(self.button_frame,width=3).pack()  #填充用


        #创建treeview==================
        self.tv = Treeview(tv_frame, height=10, columns=self.columns, show='tree')#height好像设定不了行数，实际由插入的行数决定
        self.tv.pack(expand=1, side=LEFT, fill=BOTH)
        #设定每一列的属性
        widths = [80, 70, 70, 70, 70, 190]
        self.tv.column('#0',width=0, minwidth=0)
        for i in range(len(self.columns)):
            self.tv.column(self.columns[i], width=widths[i], minwidth=widths[i], anchor='center', stretch=True)


        #设定treeview格式
        self.tv.tag_configure('oddrow', font='Symbol 12')                     #行的默认规格
        self.tv.tag_configure('select', background='SkyBlue',font='Symbol 12')#被选中的行背景颜色
        self.tv.tag_configure('disabled', background='Silver', font='Symbol 12') #不可选的行 背景颜色
        self.rowheight=27                                       #很蛋疼，好像tkinter里只能用整数！
        Style().configure('Treeview', rowheight=self.rowheight)      #设定每一行的高度

        # 设定选中的每一行字体颜色、背景颜色 (被选中时，没有变化)
        Style().map("Treeview",
                  foreground=[ ('focus', 'black'), ],
                  background=[ ('active', 'white')]
                  )
        self.tv.bind('<<TreeviewSelect>>', self.select_tree) #绑定tree选中时的回调函数

    def bind_mouse(self, frame):
        '''绑定鼠标滚轮与tree整个构件
           鼠标进入canvas时，滚轮滚动的是整个画面，包括多选按钮'''

        def bound_to_mousewheel(event):
            self.canvas.bind_all("<MouseWheel>",
                                 lambda event: self.canvas.yview_scroll(int(-1 * (event.delta / 120)), "units"))

        def unbound_to_mousewheel(event):
            self.canvas.unbind_all("<MouseWheel>")

        frame.bind('<Enter>', bound_to_mousewheel)
        frame.bind('<Leave>', unbound_to_mousewheel)

# ==================================tree部分，构建========================###


# ==================================tree与多选按钮的插入等各种操作========================###
    def clear_tv(self):
        # 清空tree、checkbutton
        items = self.tv.get_children()
        [self.tv.delete(item) for item in items]

        for child in self.button_frame.winfo_children():  #删除按钮frame里的所有按钮
            child.destroy()
        self.tk.update()

    def insert_tv(self,send_info_dict):
        '''插入每个住户的信息
           循环send_info_dict：---如果value是数字(0)，那么此租户没结算房租
                              ---结算了房租：tree插入该租户
                                            创建多选按，与tree该行(item)绑定
                                            将该有效的租户信息放入self.orm
           将全选按钮设定为 打勾
           根据tree设定窗口tv_frame的高度
        :param send_info_dict:扫描excel，截图后，获取到的对应月份所有租户信息
        :return:
        '''
        #重设tree、button对应关系
        self.orm=OrderedDict()
        import tkinter
        for zuhu,the_month_data in send_info_dict.items():
            if type(the_month_data) !=int:  #在send_info_dict中，如果该住户没有房租信息，那么the_month_data==0
                loufang=zuhu.split('-')[0]
                fanghao=zuhu.split('-')[1]
                name=the_month_data[0]
                fangzu=the_month_data[1]
                image=the_month_data[2]
                value=[self.the_month,loufang,fanghao,name,fangzu,''] #['日期', '楼房', '房号',租客名， '房租', '发送详情']
                tv_item=self.tv.insert('', 'end', value=value,tags=('oddrow'))      #item默认状态tags
                ck_button = tkinter.Checkbutton(self.button_frame,variable=IntVar())#多选按钮
                ck_button['command']=lambda item=tv_item:self.select_button(item)  #多选按钮的回调函数对应tree里的item
                ck_button.pack()
                self.orm[tv_item]=[ck_button,zuhu,name,image] #{item:按钮、住户房号、租客名、image}

            else:#结算房租的才会添加到self.orm，否则按钮是不可按的！
                #添加tree里的item、以及对应的多选按钮，2者都显示为不可选
                value = [self.the_month, zuhu.split('-')[0], zuhu.split('-')[1], '',0, '没有此房间的房租金额']
                tv_item = self.tv.insert('', 'end', value=value, tags=('disabled'))  # item默认状态tags
                tkinter.Checkbutton(self.button_frame, state='disabled').pack()

        #每次点击插入tree，先设定全选按钮不打勾，接着打勾并且调用其函数
        self.all_buttonvar.set(0)
        self.all_button.invoke()

        #更新canvas的高度
        height = (len(self.tv.get_children()) + 1) * self.rowheight  # treeview实际高度
        self.canvas.itemconfigure(self.tv_frame, height=height) #设定窗口tv_frame的高度
        self.tk.update()
        self.canvas.config(scrollregion=self.canvas.bbox("all"))#滚动指定的范围

    def select_all(self):
        '''回调函数---全选按钮
           作用：所有多选按钮打勾、tree所有行都改变底色(被选中)'''
        for item,[button,zuhu,name,image] in self.orm.items():
            if self.all_buttonvar.get()==1:
                button.select()
                self.tv.item(item, tags='select')
            else:
                button.deselect()
                self.tv.item(item, tags='oddrow')

    def select_button(self,item):
        '''回调函数---每个多选按钮
            作用：1.根据按钮的状态，改变对应item的底色(被选中)
                 2.根据所有按钮被选的情况，修改all_button的状态'''
        button=self.orm[item][0]
        button_value=button.getvar(button['variable']) #正常应该是获取var的值，偷懒button['variable']能获取var的名称(PY_VAR8)，getvar就能获取var的值是多少了
        if button_value=='1':
            self.tv.item(item,tags='select')
        else:
            self.tv.item(item, tags='oddrow')
        self.all_button_select()#根据所有按钮改变 全选按钮状态


    def select_tree(self,event):
        '''回调函数---点击tree的某一行
           作用：根据所点击的item改变 对应的按钮'''
        select_item=self.tv.focus()
        send_info=self.orm.get(select_item) #所选的item在orm中(结算了房租)
        if send_info:
            button = send_info[0]
            button.invoke()  #改变对应按钮的状态，而且调用其函数(改变该item颜色，也改变全选按钮)


    def all_button_select(self):
        '''根据所有按钮改变 全选按钮状态
            循环所有按钮，当有一个按钮没有被打勾时，全选按钮取消打勾'''
        for [button,zuhu,name,image] in self.orm.values():
            button_value = button.getvar(button['variable'])
            if button_value=='0':
                self.all_buttonvar.set(0)
                break
        else:
            self.all_buttonvar.set(1)
        #for else 如果循环不被中断，执行else
# ==================================tree与多选按钮的插入等各种操作========================###


# ===============================新的窗口：显示每个房子 各自的用水电情况========================###

    def show_shuidian(self, fangzi_shuidian):
        # 创建窗口
        tl = Toplevel()
        tl.geometry('320x500')  # 是x 不是*
        tl.title('水电合计')
        # 创建tree
        columns = ['房子', '用电量', '用水量']
        tv = Treeview(tl, columns=columns,
                      show='headings')  # height好像设定不了行数，实际由插入的行数决定
        tv.tag_configure('oddrow', background='FloralWhite', font='Symbol 12')  # 每个租客的水电格式
        tv.tag_configure('fangzi', background='FloralWhite', font=("Symbol", "17", 'bold'),
                         foreground='#800000', )  # 房子
        tv.tag_configure('total', background='SkyBlue', font='Symbol 14')  # 合计
        for column in columns:
            tv.heading(column, text=column)  # 头的名字
            tv.column(column, width=30, minwidth=30, anchor='center',
                      stretch=True)
        tv.pack(expand=1, side=LEFT, fill=BOTH)

        # 滚动条
        sl = Scrollbar(tl)
        tv['yscrollcommand'] = sl.set
        sl['command'] = tv.yview
        sl.pack(side=RIGHT, fill=Y)

        # 插入每个房子的水电情况。
        last_item = None
        for fangzi, shuidian_list in fangzi_shuidian.items():
            tv.insert('', 'end', value=[fangzi, '', ''], tags=('fangzi'))  # 先插入房子名
            for one_info in shuidian_list[:-1]:
                tv.insert('', 'end', value=one_info, tags=('oddrow'))  # 每个房号
            tv.insert('', 'end', value=shuidian_list[-1], tags=('total'))
            last_item = tv.insert('', 'end', value=['', '', ''], )  # 空行分隔
        if fangzi_shuidian: tv.delete(last_item)  # 最后的不需要空行
# ===============================新的窗口：显示每个房子 各自的用水电情况========================###

My_Tk()



